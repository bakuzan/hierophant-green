{"version":3,"sources":["webpack:///../lib/groupBy.ts","webpack:///./src/components/PageAnchor.js","webpack:///./src/pages/honours.js","webpack:///./node_modules/core-js/modules/es6.string.link.js"],"names":["key","PageAnchor","id","props","style","margin","href","Icons","link","displayName","selectTop","items","opts","n","top","hide","hideCarryOvers","filter","x","isCarryOver","episodes","length","MIN_EPISODES","slice","SubSection","slug","title","sectionId","replace","rows","averageRatedTotal","series","average","ratedCount","rhythm","display","alignItems","to","textDecoration","color","className","capitalise","HGTable","hideSeason","Section","mounted","useMountedOnClient","useState","setHideCarryOvers","seasonCount","hasAllSeasons","hideCarryOversId","seasons","map","season","generateSeriesStatistics","getSeasonName","sort","seriesSorter","allSeries","reduceNestedList","allEpisodes","allSeasons","name","checked","text","onChange","e","p","Fragment","entry","i","hideRatingColumn","data","allDataJson","nodes","groups","groupBy","split","years","Array","from","entries","year","query","createHTML","url","this"],"mappings":"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","file":"component---src-pages-honours-js-b14c1c4ee39c1721aa6c.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = groupBy;\n\nfunction groupBy(list) {\n  var keyGetter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {\n    return x;\n  };\n  var map = new Map();\n  list.forEach(function (item) {\n    var key = keyGetter(item);\n    var collection = map.get(key);\n\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n  return map;\n}\n//# sourceMappingURL=groupBy.js.map","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport Icons from 'meiko/constants/icons';\r\n\r\nfunction PageAnchor({ id, ...props }) {\r\n  return (\r\n    <a {...props} style={{ margin: `0 10px` }} href={`#${id}`}>\r\n      {Icons.link}\r\n    </a>\r\n  );\r\n}\r\n\r\nPageAnchor.displayName = 'PageAnchor';\r\nPageAnchor.propTypes = {\r\n  id: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PageAnchor;\r\n","import React, { useState } from 'react';\r\nimport { graphql, Link } from 'gatsby';\r\n\r\nimport { capitalise } from 'ayaka/capitalise';\r\nimport groupBy from 'ayaka/groupBy';\r\nimport Tickbox from 'meiko/Tickbox';\r\n\r\nimport Layout from '@/components/AppLayout';\r\nimport SEO from '@/components/AppSEO';\r\nimport HGTable from '@/components/Table/HGTable';\r\nimport PageAnchor from '@/components/PageAnchor';\r\n\r\nimport { useMountedOnClient } from '@/hooks/useMountedOnClient';\r\nimport { MIN_EPISODES } from '@/consts';\r\nimport seriesSorter from '@/utils/seriesSorter';\r\nimport reduceNestedList from '@/utils/reduceNestedList';\r\nimport averageRatedTotal from '@/utils/averageRatedTotal';\r\nimport generateSeriesStatistics from '@/utils/generateSeriesStatistics';\r\nimport getSeasonName from '@/utils/getSeasonName';\r\nimport { rhythm } from '@/utils/typography';\r\n\r\nfunction selectTop(items, opts) {\r\n  const n = opts.top ?? 3;\r\n  const hide = opts.hideCarryOvers ?? false;\r\n  const filtered = items.filter((x) => {\r\n    return !x.isCarryOver || (!hide && x.episodes.length > MIN_EPISODES);\r\n  });\r\n\r\n  return filtered.slice(0, n);\r\n}\r\n\r\nfunction SubSection({ slug, title, hideCarryOvers, items, ...props }) {\r\n  const sectionId = `section_${slug.replace(/\\//g, '')}`;\r\n  const rows = selectTop(items, { top: 3, hideCarryOvers });\r\n  const { average, ratedCount } = averageRatedTotal({ series: items });\r\n\r\n  return (\r\n    <section id={sectionId} style={{ margin: `${rhythm(1)} 0` }}>\r\n      <header style={{ display: 'flex', alignItems: 'center' }}>\r\n        <PageAnchor id={sectionId} />\r\n        <Link\r\n          to={slug}\r\n          style={{\r\n            textDecoration: 'none',\r\n            color: 'inherit'\r\n          }}\r\n        >\r\n          <h4 className=\"season-link\" style={{ margin: `${rhythm(3 / 4)} 0` }}>\r\n            {capitalise(title)}\r\n          </h4>\r\n        </Link>\r\n      </header>\r\n      <p>\r\n        Average: {average} for {ratedCount} rated series\r\n      </p>\r\n      <HGTable hideSeason {...props} items={rows} />\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction Section({ title, items }) {\r\n  const mounted = useMountedOnClient();\r\n  const [hideCarryOvers, setHideCarryOvers] = useState(false);\r\n\r\n  const sectionId = `section_${title}`;\r\n  const seasonCount = items.length;\r\n  const hasAllSeasons = seasonCount === 4;\r\n  const hideCarryOversId = `hideCarryOvers_${title}`;\r\n\r\n  const seasons = items.map((x) => ({\r\n    season: x.season,\r\n    items: generateSeriesStatistics(\r\n      getSeasonName(x.season),\r\n      x.series,\r\n      x.episodes\r\n    ).sort(seriesSorter)\r\n  }));\r\n\r\n  const allSeries = reduceNestedList(items, 'series');\r\n  const allEpisodes = reduceNestedList(items, 'episodes');\r\n  const allSeasons = generateSeriesStatistics(\r\n    title,\r\n    allSeries,\r\n    allEpisodes\r\n  ).sort(seriesSorter);\r\n  const { average, ratedCount } = averageRatedTotal({ series: allSeasons });\r\n\r\n  return (\r\n    <section id={sectionId} style={{ margin: `${rhythm(1)} 0` }}>\r\n      <header\r\n        style={{\r\n          display: 'flex',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <PageAnchor id={sectionId} />\r\n        <Link\r\n          to={`/${title}/`}\r\n          style={{\r\n            textDecoration: 'none',\r\n            color: 'inherit'\r\n          }}\r\n        >\r\n          <h3 className=\"season-link\" style={{ margin: `${rhythm(3 / 4)} 0` }}>\r\n            {title}\r\n            {hasAllSeasons ? ' - Overview' : ''}\r\n          </h3>\r\n        </Link>\r\n        <div className=\"flex-spacer\"></div>\r\n        {mounted && (\r\n          <div>\r\n            <Tickbox\r\n              className=\"hide-carry-overs\"\r\n              id={hideCarryOversId}\r\n              name={hideCarryOversId}\r\n              checked={hideCarryOvers}\r\n              text={' Hide carry overs'}\r\n              onChange={(e) => setHideCarryOvers((p) => !p)}\r\n            />\r\n          </div>\r\n        )}\r\n      </header>\r\n      <p>\r\n        Average: {average} for {ratedCount} rated series\r\n      </p>\r\n\r\n      {!hasAllSeasons && (\r\n        <p>\r\n          Once all seasons for the year are available, a top 5 ranking for the\r\n          year table will be displayed.\r\n          <br /> Below are top 3 rankings for each season in {title}. <br />\r\n          Unfinished seasons will not display the overall rating column.\r\n        </p>\r\n      )}\r\n      {hasAllSeasons && (\r\n        <React.Fragment>\r\n          <p>\r\n            Below is a top 5 ranking for the year of {title}.\r\n            <br />\r\n            Following that each individual season for {title} has a top 3\r\n            ranking.\r\n          </p>\r\n          <HGTable items={selectTop(allSeasons, { top: 5, hideCarryOvers })} />\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {seasons.map((entry, i) => {\r\n        const name = getSeasonName(entry.season, false);\r\n        return (\r\n          <SubSection\r\n            key={entry.season}\r\n            slug={`/${entry.season}/`}\r\n            title={`${name} ${title}`}\r\n            items={entry.items}\r\n            hideCarryOvers={hideCarryOvers}\r\n            hideRatingColumn={i + 1 >= seasonCount}\r\n          />\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ({ data }) => {\r\n  const seasons = data.allDataJson.nodes ?? [];\r\n  const groups = groupBy(seasons, (x) => x.season.split('-')[0]);\r\n  const years = Array.from(groups.entries());\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Honours\" />\r\n      <div>\r\n        <header>\r\n          <h2>Honours</h2>\r\n        </header>\r\n        <p>\r\n          Below are the best series of each season that currently has data on\r\n          the site.\r\n          <br /> These are automated based on the on the sort order of average\r\n          desc, rating desc, mode desc, and title asc.\r\n        </p>\r\n        {years.map(([year, items]) => (\r\n          <Section key={year} title={year} items={items} />\r\n        ))}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allDataJson(sort: { order: DESC, fields: season }) {\r\n      nodes {\r\n        season\r\n        series {\r\n          id\r\n          title\r\n          image {\r\n            childImageSharp {\r\n              fixed(width: 96, height: 150) {\r\n                ...GatsbyImageSharpFixed\r\n              }\r\n            }\r\n          }\r\n          malId\r\n          rating\r\n          totalEpisodes\r\n          season {\r\n            year\r\n            season\r\n          }\r\n        }\r\n        episodes {\r\n          id\r\n          date\r\n          episode\r\n          rating\r\n          animeId\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}