{"version":3,"sources":["webpack:///./src/templates/year.js","webpack:///./src/utils/averageRatedTotal.js","webpack:///./node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///./src/components/Table.js","webpack:///./src/components/Navigation.js","webpack:///./src/components/YearOverview.js","webpack:///./src/components/BaseTemplate.js","webpack:///./src/utils/getSeriesStats.js"],"names":["__webpack_exports__","_ref","data","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","year","seasons","allDataJson","nodes","overview","map","averageRatedTotal","series","reduce","p","c","concat","x","Object","assign","season","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_BaseTemplate__WEBPACK_IMPORTED_MODULE_3__","title","query","__webpack_require__","d","_helpers__WEBPACK_IMPORTED_MODULE_0__","rated","filter","rating","ratedCount","length","average","roundToTwo","seriesCount","$export","aFunction","toObject","fails","$sort","sort","test","P","F","undefined","comparefn","call","this","module","exports","method","arg","Table","style","headers","children","objectWithoutPropertiesLoose_default","react_default","_ref2","text","key","defaultProps","propTypes","PropTypes","object","arrayOf","shape","string","isRequired","func","Navigation","next","previous","display","flexWrap","justifyContent","listStyle","padding","gatsby_browser_entry","to","fields","slug","rel","marginRight","isYear","getSeasonName","navLinkProps","rhsAlign","textAlign","YearOverview","components_Table","column-title","className","seasonHeaders","BaseTemplate","pageContext","items","b","_averageRatedTotal","Layout","SEO","components_YearOverview","whiteSpace","s","i","number","stats","highest","lowest","mode","episodes","getSeriesStats","id","flexDirection","gatsby_image_default","flex","image","childImageSharp","NewTabLink","margin","rhythm","href","malId","components_Navigation"],"mappings":"kMAMeA,EAAA,iBAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAASC,EAAYC,IAAAH,EAAA,UAC/BI,EAAOF,EAAM,KACbG,EAAUJ,EAAKK,YAAYC,MAC3BC,EAAWH,EAAQI,IAAIC,KACvBC,EAASN,EAAQO,OACrB,SAACC,EAAGC,GAAJ,SAAAC,OAAcF,EAAMC,EAAEH,OAAOF,IAAI,SAACO,GAAD,OAAAC,OAAAC,OAAA,GAAaF,EAAb,CAAgBG,OAAQL,EAAEK,aAC3D,IAGF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAADN,OAAAC,OAAA,GACMhB,EADN,CAEEsB,MAAK,eAAiBpB,EACtBI,SAAUA,EACVG,OAAQA,MAKP,IAAMc,EAAK,8CCzBlBC,EAAAC,EAAA5B,EAAA,sBAAAW,IAAA,IAAAkB,EAAAF,EAAA,KAEe,SAAShB,EAATV,GAA+C,IAAlBmB,EAAkBnB,EAAlBmB,OAAQR,EAAUX,EAAVW,OAC5CkB,EAAQlB,EAAOmB,OAAO,SAACd,GAAD,OAAoB,IAAbA,EAAEe,SAC/BC,EAAaH,EAAMI,OACnBC,EAAUC,YACdN,EAAMjB,OAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEiB,QAAQ,GAAKC,GAG5C,MAAO,CACLb,SACAiB,YAAazB,EAAOsB,OACpBD,aACAE,8CCZJ,IAAAG,EAAcX,EAAQ,GACtBY,EAAgBZ,EAAQ,IACxBa,EAAeb,EAAQ,IACvBc,EAAYd,EAAQ,IACpBe,EAAA,GAAAC,KACAC,EAAA,QAEAN,IAAAO,EAAAP,EAAAQ,GAAAL,EAAA,WAEAG,EAAAD,UAAAI,OACCN,EAAA,WAEDG,EAAAD,KAAA,UAEOhB,EAAQ,IAARA,CAA0Be,IAAA,SAEjCC,KAAA,SAAAK,GACA,YAAAD,IAAAC,EACAN,EAAAO,KAAAT,EAAAU,OACAR,EAAAO,KAAAT,EAAAU,MAAAX,EAAAS,yCCnBA,IAAAP,EAAYd,EAAQ,IAEpBwB,EAAAC,QAAA,SAAAC,EAAAC,GACA,QAAAD,GAAAZ,EAAA,WAEAa,EAAAD,EAAAJ,KAAA,kBAAuD,GAAAI,EAAAJ,KAAA,wJCFvD,SAASM,EAATtD,GAAuD,IAAtCuD,EAAsCvD,EAAtCuD,MAAOC,EAA+BxD,EAA/BwD,QAASC,EAAsBzD,EAAtByD,SAAavD,EAASwD,IAAA1D,EAAA,gCACrD,OACE2D,EAAAtC,EAAAC,cAAA,QAAAL,OAAAC,OAAA,CAAOqC,MAAKtC,OAAAC,OAAA,GAAOqC,IAAarD,GAC9ByD,EAAAtC,EAAAC,cAAA,aACEqC,EAAAtC,EAAAC,cAAA,UACGkC,EAAQ/C,IAAI,SAAAmD,GAAA,IAAGC,EAAHD,EAAGC,KAAS7C,EAAZ0C,IAAAE,EAAA,iBACXD,EAAAtC,EAAAC,cAAA,KAAAL,OAAAC,OAAA,CAAI4C,IAAKD,GAAU7C,EAAnB,CAAsBuC,MAAKtC,OAAAC,OAAA,GAAQF,EAAEuC,OAAS,MAC3CM,OAKTF,EAAAtC,EAAAC,cAAA,aAAQmC,GAAYA,MAK1BH,EAAMS,aAAe,CAAER,MAAO,IAC9BD,EAAMU,UAAY,CAChBT,MAAOU,IAAUC,OACjBV,QAASS,IAAUE,QACjBF,IAAUG,MAAM,CACdP,KAAMI,IAAUI,OAAOC,cAEzBA,WACFb,SAAUQ,IAAUM,MAGPjB,mCC1Bf,SAASkB,EAATxE,GAAwC,IAAlByE,EAAkBzE,EAAlByE,KAAMC,EAAY1E,EAAZ0E,SAC1B,OACEf,EAAAtC,EAAAC,cAAA,WACEqC,EAAAtC,EAAAC,cAAA,MACEiC,MAAO,CACLoB,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXpB,EAAAtC,EAAAC,cAAA,UACGoD,GACCf,EAAAtC,EAAAC,cAAC0D,EAAA,EAAD,CACEC,GAAIP,EAASQ,OAAOC,KACpBC,IAAI,OACJ7B,MAAO,CAAE8B,YAAa,KAHxB,IAKI,IACDX,EAASY,OACHZ,EAAStE,KADf,YAEGmF,YAAcb,EAASvD,UAIjCwC,EAAAtC,EAAAC,cAAA,UACGmD,GACCd,EAAAtC,EAAAC,cAAC0D,EAAA,EAAD,CAAMC,GAAIR,EAAKS,OAAOC,KAAMC,IAAI,QAC7BX,EAAKa,OACCb,EAAKrE,KADX,YAEGmF,YAAcd,EAAKtD,QAAS,IAHlC,QAaZ,IAAMqE,EAAevB,IAAUG,MAAM,CAAEjD,OAAQ8C,IAAUI,OAAOC,aAEhEE,EAAWR,UAAY,CACrBS,KAAMe,EACNd,SAAUc,GAGGhB,QC/CTiB,EAAW,CAAEC,UAAW,SACxBlC,EAAU,CACd,CAAEK,KAAM,IACR,CAAEA,KAAM,QAASN,MAAKtC,OAAAC,OAAA,GAAOuE,IAC7B,CAAE5B,KAAM,QAASN,MAAKtC,OAAAC,OAAA,GAAOuE,IAC7B,CAAE5B,KAAM,iBAAkBN,MAAKtC,OAAAC,OAAA,GAAOuE,KAgCzBE,MA7Bf,SAAA3F,GAAgC,IAARC,EAAQD,EAARC,KACtB,OACE0D,EAAAtC,EAAAC,cAAA,WACEqC,EAAAtC,EAAAC,cAACsE,EAAD,CAAOpC,QAASA,GACb,kBACCvD,EAAKQ,IAAI,SAACU,GAAD,OACPwC,EAAAtC,EAAAC,cAAA,MAAIwC,IAAK3C,EAAOA,QACdwC,EAAAtC,EAAAC,cAAA,UACEqC,EAAAtC,EAAAC,cAAC0D,EAAA,EAAD,CAAMC,GAAE,IAAM9D,EAAOA,QAClBoE,YAAcpE,EAAOA,QAAQ,KAGlCwC,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,QAAQC,UAAU,kBAChC3E,EAAOiB,aAEVuB,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,QAAQC,UAAU,kBAChC3E,EAAOa,YAEV2B,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,iBAAiBC,UAAU,kBACzC3E,EAAOe,+CClBlBuD,EAAW,CAAEC,UAAW,SACxBK,EAAgB,CACpB,CAAElC,KAAM,IAAKN,MAAKtC,OAAAC,OAAA,GAAOuE,IACzB,CAAE5B,KAAM,SACR,CAAEA,KAAM,SAAUN,MAAKtC,OAAAC,OAAA,GAAOuE,IAC9B,CAAE5B,KAAM,UAAWN,MAAKtC,OAAAC,OAAA,GAAOuE,IAC/B,CAAE5B,KAAM,UAAWN,MAAKtC,OAAAC,OAAA,GAAOuE,IAC/B,CAAE5B,KAAM,SAAUN,MAAKtC,OAAAC,OAAA,GAAOuE,IAC9B,CAAE5B,KAAM,OAAQN,MAAKtC,OAAAC,OAAA,GAAOuE,KAG9B,SAASO,EAAThG,GAAgE,IAAxCwB,EAAwCxB,EAAxCwB,MAAOb,EAAiCX,EAAjCW,OAAQH,EAAyBR,EAAzBQ,SAAUyF,EAAejG,EAAfiG,YACzCC,EAAQvF,EAAO+B,KAAK,SAACrB,EAAG8E,GAAJ,OAAUA,EAAEjE,QAAUb,EAAEa,UADYkE,EAE9B1F,YAAkB,CAAEC,WAA5CuB,EAFsDkE,EAEtDlE,QAASF,EAF6CoE,EAE7CpE,WAEjB,OACE2B,EAAAtC,EAAAC,cAAC+E,EAAA,EAAD,KACE1C,EAAAtC,EAAAC,cAACgF,EAAA,EAAD,CAAK9E,MAAOA,IACZmC,EAAAtC,EAAAC,cAAA,WACEqC,EAAAtC,EAAAC,cAAA,UAAKE,KACFQ,GACD2B,EAAAtC,EAAAC,cAAA,qBACYY,EADZ,QAC0BF,EAD1B,iBAIDxB,GAAYmD,EAAAtC,EAAAC,cAACiF,EAAD,CAActG,KAAMO,IACjCmD,EAAAtC,EAAAC,cAAA,KAAGiC,MAAO,CAAEiD,WAAY,aAAxB,oFAEc,OAFd,8DAGW,OAHX,2GAMA7C,EAAAtC,EAAAC,cAACsE,EAAD,CAAOpC,QAASuC,GACb,kBACCG,EAAMzF,IAAI,SAACgG,EAAGC,GACZ,IAAMC,EAASD,EAAI,EACbE,EClDL,SAAA5G,GAOZ,IAND+B,EAMC/B,EAND+B,OACAG,EAKClC,EALDkC,QACA2E,EAIC7G,EAJD6G,QACAC,EAGC9G,EAHD8G,OACAC,EAEC/G,EAFD+G,KAGA,OADC/G,EADDgH,SAEO,CACLjF,OAAQA,GAAU,IAClBG,QAASC,YAAWD,GACpB2E,UACAC,SACAC,QDqCwBE,CAAeR,GAE7B,OACE9C,EAAAtC,EAAAC,cAAA,MAAIwC,IAAK2C,EAAES,IACTvD,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,IAAIC,UAAU,kBAC7BnC,EAAAtC,EAAAC,cAAA,OACEiC,MAAO,CACLoB,QAAS,OACTwC,cAAe,SACftC,eAAgB,kBAGlBlB,EAAAtC,EAAAC,cAAA,WAAMqF,GACLF,EAAEtF,QAAUwC,EAAAtC,EAAAC,cAAA,WAAMiE,YAAckB,EAAEtF,QAAQ,MAG/CwC,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,QAAQC,UAAU,QACjCnC,EAAAtC,EAAAC,cAAA,OAAKiC,MAAO,CAAEoB,QAAS,SACrBhB,EAAAtC,EAAAC,cAAC8F,EAAA/F,EAADJ,OAAAC,OAAA,CACEqC,MAAO,CAAE8D,KAAI,aACTZ,EAAEa,MAAMC,kBAEd5D,EAAAtC,EAAAC,cAACkG,EAAA,EAAD,CACEjE,MAAO,CAAEkE,OAAM,KAAOC,YAAO,KAC7BC,KAAI,iCAAmClB,EAAEmB,OAExCnB,EAAEjF,SAITmC,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,SAASC,UAAU,kBACjCc,EAAM7E,QAET4B,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,UAAUC,UAAU,kBAClCc,EAAM1E,SAETyB,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,UAAUC,UAAU,kBAClCc,EAAMC,SAETlD,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,SAASC,UAAU,kBACjCc,EAAME,QAETnD,EAAAtC,EAAAC,cAAA,MAAIuE,eAAa,OAAOC,UAAU,kBAC/Bc,EAAMG,YAQrBpD,EAAAtC,EAAAC,cAACuG,EAAe5B,IAKtBD,EAAahC,UAAY,CACvBxC,MAAOyC,IAAUI,OAAOC,WACxB3D,OAAQsD,IAAUE,QAChBF,IAAUG,MAAM,CACd5C,MAAOyC,IAAUI,OACjBtC,OAAQkC,IAAU0C,OAClBzE,QAAS+B,IAAU0C,OACnBE,QAAS5C,IAAU0C,OACnBG,OAAQ7C,IAAU0C,OAClBI,KAAM9C,IAAU0C,UAElBrC,WACF9D,SAAUyD,IAAUE,QAClBF,IAAUG,MAAM,CACdjD,OAAQ8C,IAAUI,OAAOC,WACzBlC,YAAa6B,IAAU0C,OAAOrC,WAC9BtC,WAAYiC,IAAU0C,OAAOrC,WAC7BpC,QAAS+B,IAAUI,OAAOC,eAKjB0B","file":"component---src-templates-year-js-5e74b3e29c7b18e5713e.js","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport BaseTemplate from '../components/BaseTemplate';\r\nimport averageRatedTotal from '../utils/averageRatedTotal';\r\n\r\nexport default ({ data, ...props }) => {\r\n  const year = props['*'];\r\n  const seasons = data.allDataJson.nodes;\r\n  const overview = seasons.map(averageRatedTotal);\r\n  const series = seasons.reduce(\r\n    (p, c) => [...p, ...c.series.map((x) => ({ ...x, season: c.season }))],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <BaseTemplate\r\n      {...props}\r\n      title={`Overview of ${year}`}\r\n      overview={overview}\r\n      series={series}\r\n    />\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    allDataJson(filter: { fields: { slug: { regex: $slug } } }) {\r\n      nodes {\r\n        id\r\n        season\r\n        series {\r\n          id\r\n          title\r\n          image {\r\n            childImageSharp {\r\n              fixed(width: 96, height: 150) {\r\n                ...GatsbyImageSharpFixed\r\n              }\r\n            }\r\n          }\r\n          malId\r\n          rating\r\n          average\r\n          highest\r\n          lowest\r\n          mode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { roundToTwo } from './helpers';\r\n\r\nexport default function averageRatedTotal({ season, series }) {\r\n  const rated = series.filter((x) => x.rating !== 0);\r\n  const ratedCount = rated.length;\r\n  const average = roundToTwo(\r\n    rated.reduce((p, c) => p + c.rating, 0) / ratedCount\r\n  );\r\n\r\n  return {\r\n    season,\r\n    seriesCount: series.length,\r\n    ratedCount,\r\n    average\r\n  };\r\n}\r\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","import './Table.scss';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nfunction Table({ style, headers, children, ...props }) {\r\n  return (\r\n    <table style={{ ...style }} {...props}>\r\n      <thead>\r\n        <tr>\r\n          {headers.map(({ text, ...x }) => (\r\n            <th key={text} {...x} style={{ ...(x.style || {}) }}>\r\n              {text}\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>{children && children()}</tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nTable.defaultProps = { style: {} };\r\nTable.propTypes = {\r\n  style: PropTypes.object,\r\n  headers: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      text: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  children: PropTypes.func\r\n};\r\n\r\nexport default Table;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport getSeasonName from '../utils/getSeasonName';\r\n\r\nfunction Navigation({ next, previous }) {\r\n  return (\r\n    <nav>\r\n      <ul\r\n        style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          justifyContent: 'space-between',\r\n          listStyle: 'none',\r\n          padding: 0\r\n        }}\r\n      >\r\n        <li>\r\n          {previous && (\r\n            <Link\r\n              to={previous.fields.slug}\r\n              rel=\"prev\"\r\n              style={{ marginRight: 20 }}\r\n            >\r\n              ←{' '}\r\n              {previous.isYear\r\n                ? `${previous.year} Overview`\r\n                : getSeasonName(previous.season)}\r\n            </Link>\r\n          )}\r\n        </li>\r\n        <li>\r\n          {next && (\r\n            <Link to={next.fields.slug} rel=\"next\">\r\n              {next.isYear\r\n                ? `${next.year} Overview`\r\n                : getSeasonName(next.season)}{' '}\r\n              →\r\n            </Link>\r\n          )}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nconst navLinkProps = PropTypes.shape({ season: PropTypes.string.isRequired });\r\n\r\nNavigation.propTypes = {\r\n  next: navLinkProps,\r\n  previous: navLinkProps\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport Table from './Table';\r\n\r\nimport getSeasonName from '../utils/getSeasonName';\r\n\r\nconst rhsAlign = { textAlign: 'right' };\r\nconst headers = [\r\n  { text: '' },\r\n  { text: 'Total', style: { ...rhsAlign } },\r\n  { text: 'Rated', style: { ...rhsAlign } },\r\n  { text: 'Average Rating', style: { ...rhsAlign } }\r\n];\r\n\r\nfunction YearOverview({ data }) {\r\n  return (\r\n    <div>\r\n      <Table headers={headers}>\r\n        {() =>\r\n          data.map((season) => (\r\n            <tr key={season.season}>\r\n              <th>\r\n                <Link to={`/${season.season}`}>\r\n                  {getSeasonName(season.season, false)}\r\n                </Link>\r\n              </th>\r\n              <td column-title=\"Total\" className=\"cell cell--rhs\">\r\n                {season.seriesCount}\r\n              </td>\r\n              <td column-title=\"Rated\" className=\"cell cell--rhs\">\r\n                {season.ratedCount}\r\n              </td>\r\n              <td column-title=\"Average Rating\" className=\"cell cell--rhs\">\r\n                {season.average}\r\n              </td>\r\n            </tr>\r\n          ))\r\n        }\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default YearOverview;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Img from 'gatsby-image';\r\n\r\nimport Layout from './Layout';\r\nimport SEO from './SEO';\r\nimport Table from './Table';\r\nimport NewTabLink from './NewTabLink';\r\nimport Navigation from './Navigation';\r\nimport YearOverview from './YearOverview';\r\n\r\nimport getSeriesStats from '../utils/getSeriesStats';\r\nimport getSeasonName from '../utils/getSeasonName';\r\nimport averageRatedTotal from '../utils/averageRatedTotal';\r\nimport { rhythm } from '../utils/typography';\r\n\r\nconst rhsAlign = { textAlign: 'right' };\r\nconst seasonHeaders = [\r\n  { text: '#', style: { ...rhsAlign } },\r\n  { text: 'Title' },\r\n  { text: 'Rating', style: { ...rhsAlign } },\r\n  { text: 'Average', style: { ...rhsAlign } },\r\n  { text: 'Highest', style: { ...rhsAlign } },\r\n  { text: 'Lowest', style: { ...rhsAlign } },\r\n  { text: 'Mode', style: { ...rhsAlign } }\r\n];\r\n\r\nfunction BaseTemplate({ title, series, overview, pageContext }) {\r\n  const items = series.sort((a, b) => b.average - a.average);\r\n  const { average, ratedCount } = averageRatedTotal({ series });\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={title} />\r\n      <div>\r\n        <h2>{title}</h2>\r\n        {!!ratedCount && (\r\n          <p>\r\n            Average: {average} for {ratedCount} rated series\r\n          </p>\r\n        )}\r\n        {overview && <YearOverview data={overview} />}\r\n        <p style={{ whiteSpace: 'pre-line' }}>\r\n          In the event I have yet to rate a series, the rating will appear as a\r\n          hyphen (-).{'\\n\\r'}This is usually the case for series that are still\r\n          airing. {'\\n\\r'}In the cases where multiple ratings are tied in the\r\n          mode calculation, one will be arbitrarily selected.\r\n        </p>\r\n        <Table headers={seasonHeaders}>\r\n          {() =>\r\n            items.map((s, i) => {\r\n              const number = i + 1;\r\n              const stats = getSeriesStats(s);\r\n\r\n              return (\r\n                <tr key={s.id}>\r\n                  <td column-title=\"#\" className=\"cell cell--rhs\">\r\n                    <div\r\n                      style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-between'\r\n                      }}\r\n                    >\r\n                      <div>{number}</div>\r\n                      {s.season && <div>{getSeasonName(s.season, false)}</div>}\r\n                    </div>\r\n                  </td>\r\n                  <td column-title=\"Title\" className=\"cell\">\r\n                    <div style={{ display: 'flex' }}>\r\n                      <Img\r\n                        style={{ flex: `0 0 96px` }}\r\n                        {...s.image.childImageSharp}\r\n                      />\r\n                      <NewTabLink\r\n                        style={{ margin: `0 ${rhythm(1 / 2)}` }}\r\n                        href={`https://myanimelist.net/anime/${s.malId}`}\r\n                      >\r\n                        {s.title}\r\n                      </NewTabLink>\r\n                    </div>\r\n                  </td>\r\n                  <td column-title=\"Rating\" className=\"cell cell--rhs\">\r\n                    {stats.rating}\r\n                  </td>\r\n                  <td column-title=\"Average\" className=\"cell cell--rhs\">\r\n                    {stats.average}\r\n                  </td>\r\n                  <td column-title=\"Highest\" className=\"cell cell--rhs\">\r\n                    {stats.highest}\r\n                  </td>\r\n                  <td column-title=\"Lowest\" className=\"cell cell--rhs\">\r\n                    {stats.lowest}\r\n                  </td>\r\n                  <td column-title=\"Mode\" className=\"cell cell--rhs\">\r\n                    {stats.mode}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n        </Table>\r\n      </div>\r\n      <Navigation {...pageContext} />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nBaseTemplate.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  series: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      rating: PropTypes.number,\r\n      average: PropTypes.number,\r\n      highest: PropTypes.number,\r\n      lowest: PropTypes.number,\r\n      mode: PropTypes.number\r\n    })\r\n  ).isRequired,\r\n  overview: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      season: PropTypes.string.isRequired,\r\n      seriesCount: PropTypes.number.isRequired,\r\n      ratedCount: PropTypes.number.isRequired,\r\n      average: PropTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nexport default BaseTemplate;\r\n","import { roundToTwo } from './helpers';\r\n\r\nexport default function getSeriesStats({\r\n  rating,\r\n  average,\r\n  highest,\r\n  lowest,\r\n  mode,\r\n  episodes\r\n}) {\r\n  return {\r\n    rating: rating || '-',\r\n    average: roundToTwo(average),\r\n    highest,\r\n    lowest,\r\n    mode\r\n  };\r\n}\r\n"],"sourceRoot":""}