{"version":3,"file":"component---src-pages-index-js-b481ebab7c8907db6c77.js","mappings":"sOA2DA,MArDA,WACE,MAAMA,GAAOC,EAAAA,EAAAA,gBAAe,aAqBtBC,EAAOF,EAAKG,KAAKC,aACjBC,GAASC,EAAAA,EAAAA,GAASN,EAAKO,YAE7B,OACE,uBACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,cAAcC,EAAAA,EAAAA,IAAO,KAGvB,gBAAC,EAAAC,EAAD,CACEC,MAAOT,EACPU,IAAKb,EAAKc,OACVR,MAAO,CACLS,aAAaL,EAAAA,EAAAA,IAAO,EAAI,GACxBD,aAAc,EACdO,aAAc,SAGlB,qBAAGV,MAAO,CAAEW,SAAU,IAAKR,aAAc,IAAzC,0BAC0B,IACxB,qBAAGS,KAAMlB,EAAKmB,OAAQC,OAAO,SAASC,IAAI,uBACvCrB,EAAKc,QAHV,oCASL,E,UC/CD,SAASQ,EAAT,GAAoC,IAAjB,KAAEC,EAAF,KAAQC,GAAQ,EACjC,OACE,sBAAIlB,MAAO,CAAEC,QAAS,SACpB,gBAAC,EAAAkB,KAAD,CACEC,GAAIH,EACJjB,MAAO,CACLqB,eAAgB,OAChBC,MAAO,UACPC,WAAWnB,EAAAA,EAAAA,IAAO,GAClBD,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG3B,sBACEoB,UAAU,cACVxB,MAAO,CACLyB,UAAUrB,EAAAA,EAAAA,IAAO,GACjBsB,OAAQ,IAGTR,IAKV,CAEc,SAASS,EAAT,GAA6B,IAAX,KAAEnC,GAAQ,EACzC,MAAMoC,GAAc,IAAIC,MAAOC,cAAcC,WAEvCC,EADOxC,EAAKyC,YACIC,MAEhBC,EAAYH,EACfI,KAAKC,GAAMA,EAAEC,OAAOC,MAAM,EAAG,KAC7BC,QAAO,CAACH,EAAGI,EAAGC,IAAMA,EAAEC,QAAQN,KAAOI,IAAGG,OAE3C,OACE,gBAAC,IAAD,KAEE,gBAAC,IAAD,CAAKC,MAAM,SACX,6BACE,gBAAC,EAAD,OAGF,2BACE,sBAAIC,GAAG,WACL,gBAAC,EAAA3B,KAAD,CAAMC,GAAG,aAAT,mBAEF,2BACGY,EAASY,OADZ,kBACmCT,EADnC,UAGA,sBACEnC,MAAO,CAAE+C,cAAe,OAAQrB,OAAQ,EAAGvB,cAAcC,EAAAA,EAAAA,IAAO,KAE/D4B,EAASgB,QAAO,CAACC,EAAGC,KACnB,MAAMC,EAAOD,EAAKZ,OAAOC,MAAM,EAAG,GAIlC,MAAO,IACFU,EAHHC,EAAKZ,OAAOc,SAAS,QAAUD,IAASvB,GAKtC,gBAACZ,EAAD,CACEqC,IAAM,GAAEH,EAAKJ,UACb7B,KAAO,IAAGkC,KACVjC,KAAO,GAAEiC,eAGb,gBAACnC,EAAD,CACEqC,IAAKH,EAAKJ,GACV7B,KAAMiC,EAAKI,OAAOrC,KAClBC,MAAMqC,EAAAA,EAAAA,GAAcL,EAAKZ,UAZ7B,GAeC,MAKZ,C","sources":["webpack://hierophant-green/./src/components/Personal.js","webpack://hierophant-green/./src/pages/index.js"],"sourcesContent":["import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nimport { rhythm } from '../utils/typography';\n\nfunction Personal() {\n  const data = useStaticQuery(graphql`\n    query PersonalMetaQuery {\n      site {\n        siteMetadata {\n          author\n          malUrl\n        }\n      }\n      profilePic: file(name: { eq: \"profile-pic\" }) {\n        childImageSharp {\n          gatsbyImageData(\n            width: 75\n            height: 75\n            transformOptions: { cropFocus: NORTH }\n            layout: FIXED\n          )\n        }\n      }\n    }\n  `);\n\n  const info = data.site.siteMetadata;\n  const avatar = getImage(data.profilePic);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: rhythm(1)\n      }}\n    >\n      <GatsbyImage\n        image={avatar}\n        alt={info.author}\n        style={{\n          marginRight: rhythm(1 / 3),\n          marginBottom: 0,\n          borderRadius: '50%'\n        }}\n      />\n      <p style={{ maxWidth: 300, marginBottom: 0 }}>\n        Seasonal rating data by{' '}\n        <a href={info.malUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n          {info.author}\n        </a>\n        . Behold my idiosyncratic taste.\n      </p>\n    </div>\n  );\n}\n\nexport default Personal;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '@/components/AppLayout';\nimport SEO from '@/components/AppSEO';\nimport Personal from '@/components/Personal';\n\nimport { rhythm } from '../utils/typography';\nimport getSeasonName from '../utils/getSeasonName';\n\nfunction IndexItem({ slug, text }) {\n  return (\n    <li style={{ display: 'flex' }}>\n      <Link\n        to={slug}\n        style={{\n          textDecoration: 'none',\n          color: 'inherit',\n          marginTop: rhythm(1),\n          marginBottom: rhythm(1 / 4)\n        }}\n      >\n        <h3\n          className=\"season-link\"\n          style={{\n            fontSize: rhythm(1),\n            margin: 0\n          }}\n        >\n          {text}\n        </h3>\n      </Link>\n    </li>\n  );\n}\n\nexport default function HomePage({ data }) {\n  const currentYear = new Date().getFullYear().toString();\n  const info = data.allDataJson;\n  const seasonal = info.nodes;\n\n  const yearCount = seasonal\n    .map((x) => x.season.slice(0, 4))\n    .filter((x, i, a) => a.indexOf(x) === i).length;\n\n  return (\n    <Layout>\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <SEO title=\"Home\" />\n      <aside>\n        <Personal />\n      </aside>\n\n      <div>\n        <h2 id=\"history\">\n          <Link to=\"/#history\">Season History</Link>\n        </h2>\n        <div>\n          {seasonal.length} seasons, over {yearCount} years\n        </div>\n        <ul\n          style={{ listStyleType: 'none', margin: 0, marginBottom: rhythm(4) }}\n        >\n          {seasonal.reduce((p, node) => {\n            const year = node.season.slice(0, 4);\n            const hasFullYear =\n              node.season.includes('-10') && year !== currentYear;\n\n            return [\n              ...p,\n              hasFullYear && (\n                <IndexItem\n                  key={`${node.id}-year`}\n                  slug={`/${year}/`}\n                  text={`${year} Overview`}\n                />\n              ),\n              <IndexItem\n                key={node.id}\n                slug={node.fields.slug}\n                text={getSeasonName(node.season)}\n              />\n            ];\n          }, [])}\n        </ul>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query {\n    allDataJson(sort: { fields: [season], order: DESC }) {\n      totalCount\n      nodes {\n        id\n        season\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`;\n"],"names":["data","useStaticQuery","info","site","siteMetadata","avatar","getImage","profilePic","style","display","alignItems","marginBottom","rhythm","G","image","alt","author","marginRight","borderRadius","maxWidth","href","malUrl","target","rel","IndexItem","slug","text","Link","to","textDecoration","color","marginTop","className","fontSize","margin","HomePage","currentYear","Date","getFullYear","toString","seasonal","allDataJson","nodes","yearCount","map","x","season","slice","filter","i","a","indexOf","length","title","id","listStyleType","reduce","p","node","year","includes","key","fields","getSeasonName"],"sourceRoot":""}