{"version":3,"sources":["webpack:///./src/templates/year.js","webpack:///./src/utils/averageRatedTotal.js","webpack:///./src/components/Table.js","webpack:///./src/components/Navigation.js","webpack:///./src/components/YearOverview.js","webpack:///./src/components/BaseTemplate.js","webpack:///./src/utils/getSeriesStats.js"],"names":["__webpack_exports__","_ref","data","props","_objectWithoutPropertiesLoose","year","path","replace","seasons","allDataJson","nodes","overview","map","averageRatedTotal","series","reduce","p","c","concat","_toConsumableArray","x","Object","assign","season","console","log","react__WEBPACK_IMPORTED_MODULE_11___default","a","createElement","_components_BaseTemplate__WEBPACK_IMPORTED_MODULE_12__","title","query","__webpack_require__","d","_helpers__WEBPACK_IMPORTED_MODULE_0__","rated","filter","rating","ratedCount","length","average","roundToTwo","seriesCount","Table","style","headers","children","react_default","_ref2","text","key","defaultProps","resolveLinkText","info","date","niceDate","isYear","getSeasonName","Navigation","next","previous","display","flexWrap","justifyContent","listStyle","padding","gatsby_browser_entry","to","fields","slug","rel","marginRight","rhsAlign","textAlign","YearOverview","sorted","sort","b","components_Table","column-title","className","seasonHeaders","seriesSorter","mode","BaseTemplate","hideRatingColumn","customDescriptiveText","pageContext","tableHeaders","_averageRatedTotal","items","Layout","SEO","components_YearOverview","whiteSpace","s","i","highest","lowest","number","stats","episodes","id","flexDirection","gatsby_image_default","flex","image","childImageSharp","NewTabLink","margin","rhythm","href","malId","components_Navigation"],"mappings":"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","file":"component---src-templates-year-js-21275f1699d89aa70651.js","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport BaseTemplate from '../components/BaseTemplate';\r\nimport averageRatedTotal from '../utils/averageRatedTotal';\r\n\r\nexport default ({ data, ...props }) => {\r\n  const year = props.path.replace(/\\//g, '');\r\n  const seasons = data.allDataJson.nodes;\r\n  const overview = seasons.map(averageRatedTotal);\r\n  const series = seasons.reduce(\r\n    (p, c) => [...p, ...c.series.map((x) => ({ ...x, season: c.season }))],\r\n    []\r\n  );\r\n  console.log(props);\r\n  return (\r\n    <BaseTemplate\r\n      {...props}\r\n      title={`Overview of ${year}`}\r\n      overview={overview}\r\n      series={series}\r\n    />\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    allDataJson(filter: { fields: { slug: { regex: $slug } } }) {\r\n      nodes {\r\n        id\r\n        season\r\n        series {\r\n          id\r\n          title\r\n          image {\r\n            childImageSharp {\r\n              fixed(width: 96, height: 150) {\r\n                ...GatsbyImageSharpFixed\r\n              }\r\n            }\r\n          }\r\n          malId\r\n          rating\r\n          average\r\n          highest\r\n          lowest\r\n          mode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { roundToTwo } from './helpers';\r\n\r\nexport default function averageRatedTotal({ season, series }) {\r\n  const rated = series.filter((x) => x.rating !== 0);\r\n  const ratedCount = rated.length;\r\n  const average = roundToTwo(\r\n    rated.reduce((p, c) => p + c.rating, 0) / ratedCount\r\n  );\r\n\r\n  return {\r\n    season,\r\n    seriesCount: series.length,\r\n    ratedCount,\r\n    average\r\n  };\r\n}\r\n","import './Table.scss';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nfunction Table({ style, headers, children, ...props }) {\r\n  return (\r\n    <table style={{ ...style }} {...props}>\r\n      <thead>\r\n        <tr>\r\n          {headers.map(({ text, ...x }) => (\r\n            <th key={text} {...x} style={{ ...(x.style || {}) }}>\r\n              {text}\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>{children && children()}</tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nTable.defaultProps = { style: {} };\r\nTable.propTypes = {\r\n  style: PropTypes.object,\r\n  headers: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      text: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  children: PropTypes.func\r\n};\r\n\r\nexport default Table;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport getSeasonName from '../utils/getSeasonName';\r\nimport niceDate from '../utils/niceDate';\r\n\r\nfunction resolveLinkText(info) {\r\n  if (info.date) {\r\n    return `Week of ${niceDate(info.date)}`;\r\n  } else if (info.isYear) {\r\n    return `${info.year} Overview`;\r\n  }\r\n\r\n  return getSeasonName(info.season);\r\n}\r\n\r\nfunction Navigation({ next, previous }) {\r\n  return (\r\n    <nav>\r\n      <ul\r\n        style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          justifyContent: 'space-between',\r\n          listStyle: 'none',\r\n          padding: 0\r\n        }}\r\n      >\r\n        <li>\r\n          {previous && (\r\n            <Link\r\n              to={previous.fields.slug}\r\n              rel=\"prev\"\r\n              style={{ marginRight: 20 }}\r\n            >\r\n              ← {resolveLinkText(previous)}\r\n            </Link>\r\n          )}\r\n        </li>\r\n        <li>\r\n          {next && (\r\n            <Link to={next.fields.slug} rel=\"next\">\r\n              {resolveLinkText(next)} →\r\n            </Link>\r\n          )}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nconst navLinkProps = PropTypes.shape({ season: PropTypes.string.isRequired });\r\n\r\nNavigation.propTypes = {\r\n  next: navLinkProps,\r\n  previous: navLinkProps\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport Table from './Table';\r\n\r\nimport getSeasonName from '../utils/getSeasonName';\r\n\r\nconst rhsAlign = { textAlign: 'right' };\r\nconst headers = [\r\n  { text: '' },\r\n  { text: 'Total', style: { ...rhsAlign } },\r\n  { text: 'Rated', style: { ...rhsAlign } },\r\n  { text: 'Average Rating', style: { ...rhsAlign } }\r\n];\r\n\r\nfunction YearOverview({ data }) {\r\n  const sorted = data.sort((a, b) => (a.season > b.season ? 1 : -1));\r\n\r\n  return (\r\n    <div>\r\n      <Table headers={headers}>\r\n        {() =>\r\n          sorted.map((season) => (\r\n            <tr key={season.season}>\r\n              <th>\r\n                <Link to={`/${season.season}`}>\r\n                  {getSeasonName(season.season, false)}\r\n                </Link>\r\n              </th>\r\n              <td column-title=\"Total\" className=\"cell cell--rhs\">\r\n                {season.seriesCount}\r\n              </td>\r\n              <td column-title=\"Rated\" className=\"cell cell--rhs\">\r\n                {season.ratedCount}\r\n              </td>\r\n              <td column-title=\"Average Rating\" className=\"cell cell--rhs\">\r\n                {season.average}\r\n              </td>\r\n            </tr>\r\n          ))\r\n        }\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default YearOverview;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Img from 'gatsby-image';\r\n\r\nimport Layout from './Layout';\r\nimport SEO from './SEO';\r\nimport Table from './Table';\r\nimport NewTabLink from './NewTabLink';\r\nimport Navigation from './Navigation';\r\nimport YearOverview from './YearOverview';\r\n\r\nimport getSeriesStats from '../utils/getSeriesStats';\r\nimport getSeasonName from '../utils/getSeasonName';\r\nimport averageRatedTotal from '../utils/averageRatedTotal';\r\nimport { rhythm } from '../utils/typography';\r\n\r\nconst rhsAlign = { textAlign: 'right' };\r\nconst seasonHeaders = [\r\n  { text: '#', style: { ...rhsAlign } },\r\n  { text: 'Title' },\r\n  { text: 'Rating', style: { ...rhsAlign } },\r\n  { text: 'Average', style: { ...rhsAlign } },\r\n  { text: 'Highest', style: { ...rhsAlign } },\r\n  { text: 'Lowest', style: { ...rhsAlign } },\r\n  { text: 'Mode', style: { ...rhsAlign } }\r\n];\r\n\r\n// order by average desc, rating desc, mode desc, none\r\nconst seriesSorter = (a, b) =>\r\n  b.average - a.average || b.rating - a.rating || b.mode - a.mode || 0;\r\n\r\nfunction BaseTemplate({\r\n  title,\r\n  series,\r\n  overview,\r\n  hideRatingColumn,\r\n  customDescriptiveText,\r\n  pageContext\r\n}) {\r\n  const tableHeaders = hideRatingColumn\r\n    ? seasonHeaders.filter((x) => x.text !== `Rating`)\r\n    : seasonHeaders;\r\n\r\n  const { average, ratedCount } = averageRatedTotal({ series });\r\n  const items = series.sort(seriesSorter);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={title} />\r\n      <div>\r\n        <h2>{title}</h2>\r\n        {!!ratedCount && (\r\n          <p>\r\n            Average: {average} for {ratedCount} rated series\r\n          </p>\r\n        )}\r\n        {overview && <YearOverview data={overview} />}\r\n        <p style={{ whiteSpace: 'pre-line' }}>\r\n          {customDescriptiveText}\r\n          {!hideRatingColumn &&\r\n            `In the event I have yet to rate a series, the rating will appear as a hyphen (-).\r\n            This is usually the case for series that are still airing.`}\r\n          {'\\n\\r'}In the cases where multiple ratings are tied in the mode\r\n          calculation, one will be arbitrarily selected.\r\n        </p>\r\n        <Table headers={tableHeaders}>\r\n          {() =>\r\n            items.map((s, i) => {\r\n              const number = i + 1;\r\n              const stats = getSeriesStats(s);\r\n\r\n              return (\r\n                <tr key={s.id}>\r\n                  <td column-title=\"#\" className=\"cell cell--rhs\">\r\n                    <div\r\n                      style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-between'\r\n                      }}\r\n                    >\r\n                      <div>{number}</div>\r\n                      {s.season && <div>{getSeasonName(s.season, false)}</div>}\r\n                    </div>\r\n                  </td>\r\n                  <td column-title=\"Title\" className=\"cell\">\r\n                    <div style={{ display: 'flex' }}>\r\n                      <Img\r\n                        style={{ flex: `0 0 96px` }}\r\n                        {...s.image.childImageSharp}\r\n                      />\r\n                      <NewTabLink\r\n                        style={{ margin: `0 ${rhythm(1 / 2)}` }}\r\n                        href={`https://myanimelist.net/anime/${s.malId}`}\r\n                      >\r\n                        {s.title}\r\n                      </NewTabLink>\r\n                    </div>\r\n                  </td>\r\n                  {!hideRatingColumn && (\r\n                    <td column-title=\"Rating\" className=\"cell cell--rhs\">\r\n                      {stats.rating}\r\n                    </td>\r\n                  )}\r\n                  <td column-title=\"Average\" className=\"cell cell--rhs\">\r\n                    {stats.average}\r\n                  </td>\r\n                  <td column-title=\"Highest\" className=\"cell cell--rhs\">\r\n                    {stats.highest}\r\n                  </td>\r\n                  <td column-title=\"Lowest\" className=\"cell cell--rhs\">\r\n                    {stats.lowest}\r\n                  </td>\r\n                  <td column-title=\"Mode\" className=\"cell cell--rhs\">\r\n                    {stats.mode}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n        </Table>\r\n      </div>\r\n      <Navigation {...pageContext} />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nBaseTemplate.defaultProps = {\r\n  customDescriptiveText: ''\r\n};\r\n\r\nBaseTemplate.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  series: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      rating: PropTypes.number,\r\n      average: PropTypes.number,\r\n      highest: PropTypes.number,\r\n      lowest: PropTypes.number,\r\n      mode: PropTypes.number\r\n    })\r\n  ).isRequired,\r\n  overview: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      season: PropTypes.string.isRequired,\r\n      seriesCount: PropTypes.number.isRequired,\r\n      ratedCount: PropTypes.number.isRequired,\r\n      average: PropTypes.string.isRequired\r\n    })\r\n  ),\r\n  hideRatingColumn: PropTypes.bool,\r\n  customDescriptiveText: PropTypes.string\r\n};\r\n\r\nexport default BaseTemplate;\r\n","import { roundToTwo } from './helpers';\r\n\r\nexport default function getSeriesStats({\r\n  rating,\r\n  average,\r\n  highest,\r\n  lowest,\r\n  mode,\r\n  episodes\r\n}) {\r\n  return {\r\n    rating: rating || '-',\r\n    average: roundToTwo(average),\r\n    highest,\r\n    lowest,\r\n    mode\r\n  };\r\n}\r\n"],"sourceRoot":""}