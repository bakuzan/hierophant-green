{"version":3,"sources":["webpack:///./src/components/Personal.js","webpack:///./src/pages/index.js"],"names":["Personal","data","_312310279","info","site","siteMetadata","avatar","profilePic","childImageSharp","adjective","words","Math","floor","random","length","react_default","a","createElement","style","display","alignItems","marginBottom","rhythm","gatsby_image_default","Object","assign","alt","author","marginRight","borderRadius","maxWidth","href","malUrl","target","rel","__webpack_require__","d","__webpack_exports__","query","_ref","allDataJson","Layout","SEO","title","components_Personal","margin","totalCount","listStyleType","edges","map","_ref2","node","key","id","gatsby_browser_entry","to","fields","slug","textDecoration","color","className","marginTop","getSeasonName","season"],"mappings":"4LA8DeA,MAnDf,WACE,IAAMC,EAAOC,EAAAD,KAkBPE,EAAOF,EAAKG,KAAKC,aACjBC,EAASL,EAAKM,WAAWC,gBACzBC,EAxBCC,IAAMC,KAAKC,MAAMD,KAAKE,SAAWH,IAAMI,SA0B9C,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,aAAcC,YAAO,KAGvBP,EAAAC,EAAAC,cAACM,EAAAP,EAADQ,OAAAC,OAAA,GACMnB,EADN,CAEEoB,IAAKvB,EAAKwB,OACVT,MAAO,CACLU,YAAaN,YAAO,EAAI,GACxBD,aAAc,EACdQ,aAAc,UAGlBd,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEY,SAAU,IAAKT,aAAc,IAAzC,0BAC0B,IACxBN,EAAAC,EAAAC,cAAA,KAAGc,KAAM5B,EAAK6B,OAAQC,OAAO,SAASC,IAAI,uBACvC/B,EAAKwB,QAHV,eAKelB,EALf,8BCnDN0B,EAAAC,EAAAC,EAAA,0BAAAC,IAUeD,EAAA,iBAAAE,GAAc,IACrBpC,EADqBoC,EAAXtC,KACEuC,YAElB,OACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAKC,MAAM,SACX5B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAC2B,EAAD,OAEF7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MACEC,MAAO,CACLC,QAAS,eACT0B,OAAWvB,YAAO,KAAZ,SAHV,WAQAP,EAAAC,EAAAC,cAAA,WAAMd,EAAK2C,WAAX,YACA/B,EAAAC,EAAAC,cAAA,MACEC,MAAO,CAAE6B,cAAe,OAAQF,OAAQ,EAAGxB,aAAcC,YAAO,KAE/DnB,EAAK6C,MAAMC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACdpC,EAAAC,EAAAC,cAAA,MAAImC,IAAKD,EAAKE,GAAInC,MAAO,CAAEC,QAAS,SAClCJ,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CACEC,GAAIJ,EAAKK,OAAOC,KAChBvC,MAAO,CACLwC,eAAgB,OAChBC,MAAO,YAGT5C,EAAAC,EAAAC,cAAA,MACE2C,UAAU,cACV1C,MAAO,CACL2C,UAAWvC,YAAO,GAClBD,aAAcC,YAAO,OAGtBwC,YAAcX,EAAKY,iBAtCvB,IAiDFzB,EAAK","file":"component---src-pages-index-js-f3609b3c81c41d369892.js","sourcesContent":["import React from 'react';\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\n\r\nimport { words } from '../consts';\r\nimport { rhythm } from '../utils/typography';\r\n\r\nfunction getRandomAdj() {\r\n  return words[Math.floor(Math.random() * words.length)];\r\n}\r\n\r\nfunction Personal() {\r\n  const data = useStaticQuery(graphql`\r\n    query PersonalMetaQuery {\r\n      site {\r\n        siteMetadata {\r\n          author\r\n          malUrl\r\n        }\r\n      }\r\n      profilePic: file(name: { eq: \"profile-pic\" }) {\r\n        childImageSharp {\r\n          fixed(width: 75, height: 75, cropFocus: NORTH) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const info = data.site.siteMetadata;\r\n  const avatar = data.profilePic.childImageSharp;\r\n  const adjective = getRandomAdj();\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: rhythm(1)\r\n      }}\r\n    >\r\n      <Img\r\n        {...avatar}\r\n        alt={info.author}\r\n        style={{\r\n          marginRight: rhythm(1 / 3),\r\n          marginBottom: 0,\r\n          borderRadius: '50%'\r\n        }}\r\n      />\r\n      <p style={{ maxWidth: 290, marginBottom: 0 }}>\r\n        Seasonal rating data by{' '}\r\n        <a href={info.malUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {info.author}\r\n        </a>\r\n        . Behold my {adjective} taste\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Personal;\r\n","import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\n\r\nimport Layout from '../components/Layout';\r\nimport Personal from '../components/Personal';\r\nimport SEO from '../components/SEO';\r\n\r\nimport { rhythm } from '../utils/typography';\r\nimport getSeasonName from '../utils/getSeasonName';\r\n\r\nexport default ({ data }) => {\r\n  const info = data.allDataJson;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Home\" />\r\n      <aside>\r\n        <Personal />\r\n      </aside>\r\n      <div>\r\n        <h2\r\n          style={{\r\n            display: 'inline-block',\r\n            margin: `${rhythm(3 / 4)} 0px`\r\n          }}\r\n        >\r\n          Seasons\r\n        </h2>\r\n        <div>{info.totalCount} covered</div>\r\n        <ul\r\n          style={{ listStyleType: 'none', margin: 0, marginBottom: rhythm(4) }}\r\n        >\r\n          {info.edges.map(({ node }) => (\r\n            <li key={node.id} style={{ display: 'flex' }}>\r\n              <Link\r\n                to={node.fields.slug}\r\n                style={{\r\n                  textDecoration: 'none',\r\n                  color: 'inherit'\r\n                }}\r\n              >\r\n                <h4\r\n                  className=\"season-link\"\r\n                  style={{\r\n                    marginTop: rhythm(1),\r\n                    marginBottom: rhythm(1 / 4)\r\n                  }}\r\n                >\r\n                  {getSeasonName(node.season)}\r\n                </h4>\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allDataJson(sort: { fields: [season], order: DESC }) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          season\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}