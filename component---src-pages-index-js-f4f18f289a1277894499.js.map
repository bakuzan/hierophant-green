{"version":3,"sources":["webpack:///./src/components/Personal.js","webpack:///./src/components/FoeLink.js","webpack:///./src/pages/index.js"],"names":["Personal","data","info","site","siteMetadata","avatar","profilePic","childImageSharp","adjective","words","Math","floor","random","length","style","display","alignItems","marginBottom","rhythm","alt","author","marginRight","borderRadius","maxWidth","href","malUrl","target","rel","FoeLink","className","props","classes","filter","x","join","type","IndexItem","slug","text","to","textDecoration","color","fontSize","marginTop","useState","showMore","setShowMore","useEffect","window","__theme","currentYear","Date","getFullYear","toString","items","allDataJson","edges","map","node","seasonal","season","yearCount","slice","i","a","indexOf","airing","sort","b","date","allowMore","Layout","SEO","title","id","listStyleType","margin","wkBeg","niceDate","fields","key","onClick","reduce","p","year","hasFullYear","includes","getSeasonName","query"],"mappings":"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","file":"component---src-pages-index-js-f4f18f289a1277894499.js","sourcesContent":["import React from 'react';\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\n\r\nimport { words } from '../consts';\r\nimport { rhythm } from '../utils/typography';\r\n\r\nfunction getRandomAdj() {\r\n  return words[Math.floor(Math.random() * words.length)];\r\n}\r\n\r\nfunction Personal() {\r\n  const data = useStaticQuery(graphql`\r\n    query PersonalMetaQuery {\r\n      site {\r\n        siteMetadata {\r\n          author\r\n          malUrl\r\n        }\r\n      }\r\n      profilePic: file(name: { eq: \"profile-pic\" }) {\r\n        childImageSharp {\r\n          fixed(width: 75, height: 75, cropFocus: NORTH) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const info = data.site.siteMetadata;\r\n  const avatar = data.profilePic.childImageSharp;\r\n  const adjective = getRandomAdj();\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: rhythm(1)\r\n      }}\r\n    >\r\n      <Img\r\n        {...avatar}\r\n        alt={info.author}\r\n        style={{\r\n          marginRight: rhythm(1 / 3),\r\n          marginBottom: 0,\r\n          borderRadius: '50%'\r\n        }}\r\n      />\r\n      <p style={{ maxWidth: 290, marginBottom: 0 }}>\r\n        Seasonal rating data by{' '}\r\n        <a href={info.malUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {info.author}\r\n        </a>\r\n        . Behold my {adjective} taste\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Personal;\r\n","import React from 'react';\r\n\r\nfunction FoeLink({ className, ...props }) {\r\n  const classes = ['foe-link', className].filter((x) => !!x).join(' ');\r\n\r\n  return <button type=\"button\" className={classes} {...props}></button>;\r\n}\r\n\r\nexport default FoeLink;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\n\r\nimport Layout from '../components/Layout';\r\nimport Personal from '../components/Personal';\r\nimport SEO from '../components/SEO';\r\nimport FoeLink from '../components/FoeLink';\r\n\r\nimport { rhythm } from '../utils/typography';\r\nimport getSeasonName from '../utils/getSeasonName';\r\nimport niceDate from '../utils/niceDate';\r\n\r\nfunction IndexItem({ slug, text }) {\r\n  return (\r\n    <li style={{ display: 'flex' }}>\r\n      <Link\r\n        to={slug}\r\n        style={{\r\n          textDecoration: 'none',\r\n          color: 'inherit'\r\n        }}\r\n      >\r\n        <h3\r\n          className=\"season-link\"\r\n          style={{\r\n            fontSize: rhythm(1),\r\n            marginTop: rhythm(1),\r\n            marginBottom: rhythm(1 / 4)\r\n          }}\r\n        >\r\n          {text}\r\n        </h3>\r\n      </Link>\r\n    </li>\r\n  );\r\n}\r\n\r\nconst CURRENTLY_AIRING = `Currently Airing`;\r\nconst AIRING_LIMIT = 4;\r\n\r\nexport default ({ data }) => {\r\n  const [showMore, setShowMore] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Why window.__theme ?\r\n    // If no theme then js is disabled! So showing button would be pointless\r\n    if (window.__theme) {\r\n      setShowMore(false);\r\n    }\r\n  }, []);\r\n\r\n  const currentYear = new Date().getFullYear().toString();\r\n  const info = data.allDataJson;\r\n  const items = info.edges.map((x) => x.node);\r\n\r\n  const seasonal = items.filter((x) => x.season !== CURRENTLY_AIRING);\r\n  const yearCount = seasonal\r\n    .map((x) => x.season.slice(0, 4))\r\n    .filter((x, i, a) => a.indexOf(x) === i).length;\r\n\r\n  let airing = items\r\n    .filter((x) => x.season === CURRENTLY_AIRING)\r\n    .sort((a, b) => (a.date > b.date ? -1 : 1));\r\n\r\n  const allowMore =\r\n    !showMore && showMore !== null && airing.length > AIRING_LIMIT;\r\n\r\n  airing = showMore ? airing : airing.slice(0, AIRING_LIMIT);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Home\" />\r\n      <aside>\r\n        <Personal />\r\n      </aside>\r\n      <div>\r\n        <h2 id=\"airing\">\r\n          <Link to=\"/#airing\">Currently Airing</Link>\r\n        </h2>\r\n        <ul\r\n          style={{ listStyleType: 'none', margin: 0, marginBottom: rhythm(4) }}\r\n        >\r\n          {airing.map((node) => {\r\n            const wkBeg = niceDate(node.fields.slug);\r\n\r\n            return (\r\n              <IndexItem\r\n                key={node.id}\r\n                slug={node.fields.slug}\r\n                text={`Week of ${wkBeg}`}\r\n              />\r\n            );\r\n          })}\r\n          {allowMore && (\r\n            <FoeLink onClick={() => setShowMore(true)}>Show more weeks</FoeLink>\r\n          )}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h2 id=\"history\">\r\n          <Link to=\"/#history\">Season History</Link>\r\n        </h2>\r\n        <div>\r\n          {seasonal.length} seasons, over {yearCount} years\r\n        </div>\r\n        <ul\r\n          style={{ listStyleType: 'none', margin: 0, marginBottom: rhythm(4) }}\r\n        >\r\n          {seasonal.reduce((p, node) => {\r\n            const year = node.season.slice(0, 4);\r\n            const hasFullYear =\r\n              node.season.includes('-10') && year !== currentYear;\r\n\r\n            return [\r\n              ...p,\r\n              hasFullYear && (\r\n                <IndexItem\r\n                  key={`${node.id}-year`}\r\n                  slug={`/${year}/`}\r\n                  text={`${year} Overview`}\r\n                />\r\n              ),\r\n              <IndexItem\r\n                key={node.id}\r\n                slug={node.fields.slug}\r\n                text={getSeasonName(node.season)}\r\n              />\r\n            ];\r\n          }, [])}\r\n        </ul>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allDataJson(sort: { fields: [season], order: DESC }) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          season\r\n          date\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}