{"version":3,"sources":["webpack:///../lib/groupBy.ts","webpack:///./src/components/PageAnchor.js","webpack:///./src/components/Honours/utils.js","webpack:///./src/components/Honours/SeasonSection.js","webpack:///./src/components/Honours/StandoutSection.js","webpack:///./src/components/Honours/YearSection.js","webpack:///./src/pages/honours.js"],"names":["key","PageAnchor","id","props","style","margin","href","Icons","link","displayName","selectTop","items","opts","n","top","hide","hideCarryOvers","includeUserSettingFilters","item","hasMinEpisodes","minEpisodes","noEnding","totalEpisodes","wontFinish","Math","max","episodes","map","x","episode","isCarryOver","slice","orderStandoutEpisodes","a","b","av","rating","bv","ad","bd","title","localeCompare","SeasonSection","slug","messages","sectionId","replace","rows","averageRatedTotal","series","average","ratedCount","rhythm","display","alignItems","to","textDecoration","color","className","capitalise","isNaN","Messages","HGTable","hideSeason","standoutHeaders","text","textAlign","StandoutSection","standOutRating","storage","getKey","standOutSectionId","length","Table","headers","sort","i","number","season","year","hasRating","diffMessage","episodeId","column-title","flexDirection","justifyContent","fontSize","flex","image","childImageSharp","malId","aria-label","YearSection","yearOrSeasonName","isYear","mounted","useMountedOnClient","useState","setHideCarryOvers","seasonCount","hasAllSeasons","hideCarryOversId","seasons","generateSeriesStatistics","getSeasonName","seriesSorter","allSeries","reduceNestedList","allEpisodes","allSeasons","standOutEpisodes","filter","data","find","s","animeId","itemSeason","padding","name","checked","onChange","e","p","Fragment","entry","seasonalMessages","includes","hideRatingColumn","query","allInformationJson","nodes","allDataJson","groups","groupBy","split","years","Array","from","entries"],"mappings":"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","file":"component---src-pages-honours-js-d801de6d0295900e8432.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = groupBy;\n\nfunction groupBy(list) {\n  var keyGetter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {\n    return x;\n  };\n  var map = new Map();\n  list.forEach(function (item) {\n    var key = keyGetter(item);\n    var collection = map.get(key);\n\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n  return map;\n}\n//# sourceMappingURL=groupBy.js.map","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport Icons from 'meiko/constants/icons';\r\n\r\nfunction PageAnchor({ id, ...props }) {\r\n  return (\r\n    <a {...props} style={{ margin: `0 10px` }} href={`#${id}`}>\r\n      {Icons.link}\r\n    </a>\r\n  );\r\n}\r\n\r\nPageAnchor.displayName = 'PageAnchor';\r\nPageAnchor.propTypes = {\r\n  id: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PageAnchor;\r\n","import includeUserSettingFilters from '@/utils/includeUserSettingFilters';\r\n\r\nexport function selectTop(items, opts) {\r\n  const n = opts.top ?? 3;\r\n  const hide = opts.hideCarryOvers ?? false;\r\n\r\n  const filtered = includeUserSettingFilters(\r\n    items,\r\n    (item, hasMinEpisodes, minEpisodes) => {\r\n      const noEnding = item.totalEpisodes === 0;\r\n      const wontFinish =\r\n        minEpisodes <=\r\n        item.totalEpisodes - Math.max(...item.episodes.map((x) => x.episode));\r\n\r\n      return (\r\n        !item.isCarryOver ||\r\n        (!hide && (hasMinEpisodes || noEnding || wontFinish))\r\n      );\r\n    }\r\n  );\r\n\r\n  return filtered.slice(0, n);\r\n}\r\n\r\nexport function orderStandoutEpisodes(a, b) {\r\n  const av = a.episode.rating;\r\n  const bv = b.episode.rating;\r\n\r\n  if (av < bv) {\r\n    return 1;\r\n  }\r\n\r\n  if (av > bv) {\r\n    return -1;\r\n  }\r\n\r\n  const ad = av - a.rating;\r\n  const bd = bv - b.rating;\r\n\r\n  if (ad < bd) {\r\n    return 1;\r\n  }\r\n\r\n  if (ad > bd) {\r\n    return -1;\r\n  }\r\n\r\n  return a.title.localeCompare(b.title);\r\n}\r\n\r\nexport function generateSeriesForEpisode(yearOrSeasonName, series, episodes) {\r\n  const isYear = yearOrSeasonName.length === 4;\r\n\r\n  return episodes.map((x) => {\r\n    const data = series.find((s) => s.id === x.animeId);\r\n    const itemSeason = isYear\r\n      ? `${data.season.year}`\r\n      : `${data.season.season} ${data.season.year}`;\r\n\r\n    return {\r\n      ...data,\r\n      episodeId: x.id,\r\n      episode: x,\r\n      isCarryOver: itemSeason !== yearOrSeasonName\r\n    };\r\n  });\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport { capitalise } from 'ayaka/capitalise';\r\n\r\nimport HGTable from '@/components/Table/HGTable';\r\nimport PageAnchor from '@/components/PageAnchor';\r\nimport Messages from '@/components/Messages';\r\n\r\nimport averageRatedTotal from '@/utils/averageRatedTotal';\r\nimport { rhythm } from '@/utils/typography';\r\nimport { selectTop } from './utils';\r\n\r\nfunction SeasonSection({\r\n  slug,\r\n  title,\r\n  hideCarryOvers,\r\n  items,\r\n  messages,\r\n  ...props\r\n}) {\r\n  const sectionId = `section_${slug.replace(/\\//g, '')}`;\r\n  const rows = selectTop(items, { top: 3, hideCarryOvers });\r\n  const { average, ratedCount } = averageRatedTotal({ series: items });\r\n\r\n  return (\r\n    <section id={sectionId} style={{ margin: `${rhythm(1)} 0` }}>\r\n      <header style={{ display: 'flex', alignItems: 'center' }}>\r\n        <PageAnchor id={sectionId} />\r\n        <Link\r\n          to={slug}\r\n          style={{\r\n            textDecoration: 'none',\r\n            color: 'inherit'\r\n          }}\r\n        >\r\n          <h4 className=\"season-link\" style={{ margin: `${rhythm(3 / 4)} 0` }}>\r\n            {capitalise(title)}\r\n          </h4>\r\n        </Link>\r\n      </header>\r\n      <p>\r\n        {isNaN(average)\r\n          ? `Average rating unavailable`\r\n          : `Average: ${average} for ${ratedCount} rated series`}\r\n      </p>\r\n\r\n      <Messages items={messages} />\r\n\r\n      <HGTable hideSeason {...props} items={rows} />\r\n    </section>\r\n  );\r\n}\r\n\r\nSeasonSection.propTypes = {\r\n  slug: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  hideCarryOvers: PropTypes.bool.isRequired,\r\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  messages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      key: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired,\r\n      message: PropTypes.string.isRequired,\r\n      seasons: PropTypes.arrayOf(PropTypes.string).isRequired\r\n    })\r\n  )\r\n};\r\n\r\nexport default SeasonSection;\r\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Img from 'gatsby-image';\n\nimport NewTabLink from 'meiko/NewTabLink';\n\nimport Table from '@/components/Table';\nimport PageAnchor from '@/components/PageAnchor';\n\nimport storage from '@/utils/storage';\nimport { rhythm } from '@/utils/typography';\nimport { orderStandoutEpisodes } from './utils';\n\nconst standoutHeaders = [\n  { text: '#', style: { textAlign: 'right' } },\n  { text: 'Title' },\n  { text: 'Episode Rating', style: { textAlign: 'right' } },\n  { text: 'Rating difference', style: { textAlign: 'right' } }\n];\n\nfunction StandoutSection({ sectionId, items }) {\n  const standOutRating = storage.getKey('standoutEpisodeRating');\n  const standOutSectionId = `${sectionId}_standout`;\n\n  return (\n    <section id={standOutSectionId} style={{ margin: `${rhythm(1)} 0` }}>\n      <header style={{ display: 'flex', alignItems: 'center' }}>\n        <PageAnchor id={standOutSectionId} />\n        <h4\n          className=\"season-link season-link--no-hover\"\n          style={{ margin: `${rhythm(3 / 4)} 0` }}\n        >\n          Standout episodes of the year\n        </h4>\n      </header>\n      <p>\n        The top 5 episodes rating in at {standOutRating} or above.\n        <br /> Ordered by rating desc, rating difference to overall series\n        rating desc, and title asc.\n      </p>\n      {items.length ? (\n        <Table headers={standoutHeaders}>\n          {() =>\n            items\n              .sort(orderStandoutEpisodes)\n              .slice(0, 5)\n              .map((x, i) => {\n                const number = i + 1;\n                const season = `${x.season.season} ${x.season.year}`;\n                const hasRating = x.rating > 0;\n                const diffMessage = hasRating\n                  ? 'Rating difference is the episode rating minus the series rating.'\n                  : 'Rating difference cannot be calculated as the series does not currently have a rating.';\n\n                return (\n                  <tr key={x.episodeId}>\n                    <td column-title=\"#\" className=\"cell cell--rhs\">\n                      <div\n                        style={{\n                          display: 'flex',\n                          flexDirection: 'column',\n                          justifyContent: 'space-between'\n                        }}\n                      >\n                        <div>{number}</div>\n                        <div style={{ fontSize: `0.75rem` }}>{season}</div>\n                      </div>\n                    </td>\n                    <td column-title=\"Title\" className=\"cell\">\n                      <div style={{ display: 'flex' }}>\n                        <Img\n                          style={{ flex: `0 0 96px` }}\n                          {...x.image.childImageSharp}\n                        />\n                        <div style={{ margin: `0 ${rhythm(1 / 2)}` }}>\n                          <NewTabLink\n                            style={{\n                              display: 'flex',\n                              justifyContent: 'flex-start'\n                            }}\n                            href={`https://myanimelist.net/anime/${x.malId}`}\n                          >\n                            {x.title}\n                          </NewTabLink>\n                          <div style={{ fontSize: `0.75rem` }}>\n                            Episode {x.episode.episode}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td\n                      column-title=\"Episode Rating\"\n                      className=\"cell cell--rhs\"\n                    >\n                      {x.episode.rating}\n                    </td>\n                    <td\n                      column-title=\"Rating Difference\"\n                      className=\"cell cell--rhs\"\n                      aria-label={diffMessage}\n                      title={diffMessage}\n                    >\n                      {hasRating ? x.episode.rating - x.rating : 'N/A'}\n                    </td>\n                  </tr>\n                );\n              })\n          }\n        </Table>\n      ) : (\n        <div>This year saw no stand out episodes.</div>\n      )}\n    </section>\n  );\n}\n\nStandoutSection.propTypes = {\n  sectionId: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default StandoutSection;\n","import PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport Tickbox from 'meiko/Tickbox';\r\n\r\nimport HGTable from '@/components/Table/HGTable';\r\nimport PageAnchor from '@/components/PageAnchor';\r\nimport SeasonSection from './SeasonSection';\r\nimport StandoutSection from './StandoutSection';\r\n\r\nimport { useMountedOnClient } from '@/hooks/useMountedOnClient';\r\nimport storage from '@/utils/storage';\r\nimport seriesSorter from '@/utils/seriesSorter';\r\nimport reduceNestedList from '@/utils/reduceNestedList';\r\nimport averageRatedTotal from '@/utils/averageRatedTotal';\r\nimport generateSeriesStatistics from '@/utils/generateSeriesStatistics';\r\nimport getSeasonName from '@/utils/getSeasonName';\r\nimport { rhythm } from '@/utils/typography';\r\nimport { selectTop, generateSeriesForEpisode } from './utils';\r\n\r\nfunction YearSection({ title, items, messages }) {\r\n  const mounted = useMountedOnClient();\r\n  const [hideCarryOvers, setHideCarryOvers] = useState(false);\r\n\r\n  const sectionId = `section_${title}`;\r\n  const seasonCount = items.length;\r\n  const hasAllSeasons = seasonCount === 4;\r\n  const hideCarryOversId = `hideCarryOvers_${title}`;\r\n\r\n  const seasons = items.map((x) => ({\r\n    season: x.season,\r\n    items: generateSeriesStatistics(\r\n      getSeasonName(x.season),\r\n      x.series,\r\n      x.episodes\r\n    ).sort(seriesSorter)\r\n  }));\r\n\r\n  const allSeries = reduceNestedList(items, 'series');\r\n  const allEpisodes = reduceNestedList(items, 'episodes');\r\n  const allSeasons = generateSeriesStatistics(\r\n    title,\r\n    allSeries,\r\n    allEpisodes\r\n  ).sort(seriesSorter);\r\n\r\n  const { average, ratedCount } = averageRatedTotal({ series: allSeasons });\r\n\r\n  const standOutRating = storage.getKey('standoutEpisodeRating');\r\n  const standOutEpisodes = generateSeriesForEpisode(\r\n    title,\r\n    allSeries,\r\n    allEpisodes.filter((x) => x.rating >= standOutRating)\r\n  ).filter((x) => !x.isCarryOver || !hideCarryOvers);\r\n\r\n  return (\r\n    <section\r\n      id={sectionId}\r\n      style={{\r\n        padding: `0 ${rhythm(3 / 4)} ${rhythm(1 / 8)}`,\r\n        margin: `${rhythm(1)} 0`\r\n      }}\r\n    >\r\n      <header\r\n        style={{\r\n          display: 'flex',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <PageAnchor id={sectionId} />\r\n        <Link\r\n          to={`/${title}/`}\r\n          style={{\r\n            textDecoration: 'none',\r\n            color: 'inherit'\r\n          }}\r\n        >\r\n          <h3 className=\"season-link\" style={{ margin: `${rhythm(3 / 4)} 0` }}>\r\n            {title}\r\n            {hasAllSeasons ? ' - Overview' : ''}\r\n          </h3>\r\n        </Link>\r\n        <div className=\"flex-spacer\"></div>\r\n        {mounted && (\r\n          <div>\r\n            <Tickbox\r\n              className=\"hide-carry-overs\"\r\n              id={hideCarryOversId}\r\n              name={hideCarryOversId}\r\n              checked={hideCarryOvers}\r\n              text={' Hide carry overs'}\r\n              onChange={(e) => setHideCarryOvers((p) => !p)}\r\n            />\r\n          </div>\r\n        )}\r\n      </header>\r\n\r\n      <p>\r\n        {isNaN(average)\r\n          ? `Average rating unavailable`\r\n          : `Average: ${average} for ${ratedCount} rated series`}\r\n      </p>\r\n\r\n      {!hasAllSeasons && (\r\n        <p>\r\n          Once all seasons for the year are available, a top 5 ranking for the\r\n          year table will be displayed.\r\n          <br /> Below are top 3 rankings for each season in {title}. <br />\r\n          Unfinished seasons will not display the overall rating column.\r\n        </p>\r\n      )}\r\n      {hasAllSeasons && (\r\n        <React.Fragment>\r\n          <p>\r\n            Below is a top 5 ranking for the year of {title}.\r\n            <br />\r\n            Following that each individual season for {title} has a top 3\r\n            ranking.\r\n          </p>\r\n          <HGTable items={selectTop(allSeasons, { top: 5, hideCarryOvers })} />\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {seasons.map((entry, i) => {\r\n        const name = getSeasonName(entry.season, false);\r\n        const seasonalMessages = messages.filter((x) =>\r\n          x.seasons.includes(entry.season)\r\n        );\r\n\r\n        return (\r\n          <SeasonSection\r\n            key={entry.season}\r\n            slug={`/${entry.season}/`}\r\n            title={`${name} ${title}`}\r\n            items={entry.items}\r\n            hideCarryOvers={hideCarryOvers}\r\n            hideRatingColumn={i + 1 >= seasonCount}\r\n            messages={seasonalMessages}\r\n          />\r\n        );\r\n      })}\r\n\r\n      {hasAllSeasons && (\r\n        <StandoutSection sectionId={sectionId} items={standOutEpisodes} />\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n\r\nYearSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  messages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      key: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired,\r\n      message: PropTypes.string.isRequired,\r\n      seasons: PropTypes.arrayOf(PropTypes.string).isRequired\r\n    })\r\n  )\r\n};\r\n\r\nexport default YearSection;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport groupBy from 'ayaka/groupBy';\r\n\r\nimport Layout from '@/components/AppLayout';\r\nimport SEO from '@/components/AppSEO';\r\nimport YearSection from '@/components/Honours/YearSection';\r\n\r\nexport default ({ data }) => {\r\n  const messages = data.allInformationJson.nodes ?? [];\r\n  const seasons = data.allDataJson.nodes ?? [];\r\n  const groups = groupBy(seasons, (x) => x.season.split('-')[0]);\r\n  const years = Array.from(groups.entries());\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Honours\" />\r\n      <div>\r\n        <header>\r\n          <h2>Honours</h2>\r\n        </header>\r\n        <p>\r\n          Below are the best series of each season that currently has data on\r\n          the site.\r\n          <br /> These are automated based on the on the sort order of average\r\n          desc, rating desc, mode desc, and title asc.\r\n        </p>\r\n        {years.map(([year, items]) => (\r\n          <YearSection\r\n            key={year}\r\n            title={year}\r\n            items={items}\r\n            messages={messages}\r\n          />\r\n        ))}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allInformationJson {\r\n      nodes {\r\n        key\r\n        type\r\n        message\r\n        seasons\r\n      }\r\n    }\r\n    allDataJson(sort: { order: DESC, fields: season }) {\r\n      nodes {\r\n        season\r\n        series {\r\n          id\r\n          title\r\n          image {\r\n            childImageSharp {\r\n              fixed(width: 96, height: 150) {\r\n                ...GatsbyImageSharpFixed\r\n              }\r\n            }\r\n          }\r\n          malId\r\n          rating\r\n          totalEpisodes\r\n          season {\r\n            year\r\n            season\r\n          }\r\n        }\r\n        episodes {\r\n          id\r\n          date\r\n          episode\r\n          rating\r\n          animeId\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}