{"version":3,"file":"component---src-pages-honours-js-a23aa0b2b3bc49a182ff.js","mappings":"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","sources":["webpack://hierophant-green/../lib/groupBy.ts","webpack://hierophant-green/./src/components/PageAnchor.js","webpack://hierophant-green/./src/components/Honours/utils.js","webpack://hierophant-green/./src/components/Honours/SeasonSection.js","webpack://hierophant-green/./src/components/Honours/StandoutSection.js","webpack://hierophant-green/./src/components/Honours/YearSection.js","webpack://hierophant-green/./src/pages/honours.js"],"sourcesContent":[null,"import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport Icons from 'meiko/constants/icons';\r\n\r\nfunction PageAnchor({ id, ...props }) {\r\n  return (\r\n    <a {...props} style={{ margin: `0 10px` }} href={`#${id}`}>\r\n      {Icons.link}\r\n    </a>\r\n  );\r\n}\r\n\r\nPageAnchor.displayName = 'PageAnchor';\r\nPageAnchor.propTypes = {\r\n  id: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PageAnchor;\r\n","import includeUserSettingFilters from '@/utils/includeUserSettingFilters';\r\n\r\nexport function selectTop(items, opts) {\r\n  const n = opts.top ?? 3;\r\n  const hide = opts.hideCarryOvers ?? false;\r\n\r\n  const filtered = includeUserSettingFilters(\r\n    items,\r\n    (item, hasMinEpisodes, minEpisodes) => {\r\n      const noEnding = item.totalEpisodes === 0;\r\n      const wontFinish =\r\n        minEpisodes <=\r\n        item.totalEpisodes - Math.max(...item.episodes.map((x) => x.episode));\r\n\r\n      return (\r\n        !item.isCarryOver ||\r\n        (!hide && (hasMinEpisodes || noEnding || wontFinish))\r\n      );\r\n    }\r\n  );\r\n\r\n  return filtered.slice(0, n);\r\n}\r\n\r\nexport function orderStandoutEpisodes(a, b) {\r\n  const av = a.episode.rating;\r\n  const bv = b.episode.rating;\r\n\r\n  if (av < bv) {\r\n    return 1;\r\n  }\r\n\r\n  if (av > bv) {\r\n    return -1;\r\n  }\r\n\r\n  const ad = av - a.rating;\r\n  const bd = bv - b.rating;\r\n\r\n  if (ad < bd) {\r\n    return 1;\r\n  }\r\n\r\n  if (ad > bd) {\r\n    return -1;\r\n  }\r\n\r\n  return a.title.localeCompare(b.title);\r\n}\r\n\r\nexport function generateSeriesForEpisode(yearOrSeasonName, series, episodes) {\r\n  const isYear = yearOrSeasonName.length === 4;\r\n\r\n  return episodes.map((x) => {\r\n    const data = series.find((s) => s.id === x.animeId);\r\n    const itemSeason = isYear\r\n      ? `${data.season.year}`\r\n      : `${data.season.season} ${data.season.year}`;\r\n\r\n    return {\r\n      ...data,\r\n      episodeId: x.id,\r\n      episode: x,\r\n      isCarryOver: itemSeason !== yearOrSeasonName\r\n    };\r\n  });\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport { capitalise } from 'ayaka/capitalise';\r\n\r\nimport HGTable from '@/components/Table/HGTable';\r\nimport PageAnchor from '@/components/PageAnchor';\r\nimport Messages from '@/components/Messages';\r\n\r\nimport averageRatedTotal from '@/utils/averageRatedTotal';\r\nimport { rhythm } from '@/utils/typography';\r\nimport { selectTop } from './utils';\r\n\r\nfunction SeasonSection({\r\n  slug,\r\n  title,\r\n  hideCarryOvers,\r\n  items,\r\n  messages,\r\n  ...props\r\n}) {\r\n  const sectionId = `section_${slug.replace(/\\//g, '')}`;\r\n  const rows = selectTop(items, { top: 3, hideCarryOvers });\r\n  const { average, ratedCount } = averageRatedTotal({ series: items });\r\n\r\n  return (\r\n    <section id={sectionId} style={{ margin: `${rhythm(1)} 0` }}>\r\n      <header style={{ display: 'flex', alignItems: 'center' }}>\r\n        <PageAnchor id={sectionId} />\r\n        <Link\r\n          to={slug}\r\n          style={{\r\n            textDecoration: 'none',\r\n            color: 'inherit'\r\n          }}\r\n        >\r\n          <h4 className=\"season-link\" style={{ margin: `${rhythm(3 / 4)} 0` }}>\r\n            {capitalise(title)}\r\n          </h4>\r\n        </Link>\r\n      </header>\r\n      <p>\r\n        {isNaN(average)\r\n          ? `Average rating unavailable`\r\n          : `Average: ${average} for ${ratedCount} rated series`}\r\n      </p>\r\n\r\n      <Messages items={messages} />\r\n\r\n      <HGTable hideSeason {...props} items={rows} />\r\n    </section>\r\n  );\r\n}\r\n\r\nSeasonSection.propTypes = {\r\n  slug: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  hideCarryOvers: PropTypes.bool.isRequired,\r\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  messages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      key: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired,\r\n      message: PropTypes.string.isRequired,\r\n      seasons: PropTypes.arrayOf(PropTypes.string).isRequired\r\n    })\r\n  )\r\n};\r\n\r\nexport default SeasonSection;\r\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nimport NewTabLink from 'meiko/NewTabLink';\n\nimport Table from '@/components/Table';\nimport PageAnchor from '@/components/PageAnchor';\n\nimport storage from '@/utils/storage';\nimport { rhythm } from '@/utils/typography';\nimport { orderStandoutEpisodes } from './utils';\n\nconst standoutHeaders = [\n  { text: '#', style: { textAlign: 'right' } },\n  { text: 'Title' },\n  { text: 'Episode Rating', style: { textAlign: 'right' } },\n  { text: 'Rating difference', style: { textAlign: 'right' } }\n];\n\nfunction StandoutSection({ sectionId, items }) {\n  const standOutRating = storage.getKey('standoutEpisodeRating');\n  const standOutSectionId = `${sectionId}_standout`;\n\n  return (\n    <section id={standOutSectionId} style={{ margin: `${rhythm(1)} 0` }}>\n      <header style={{ display: 'flex', alignItems: 'center' }}>\n        <PageAnchor id={standOutSectionId} />\n        <h4\n          className=\"season-link season-link--no-hover\"\n          style={{ margin: `${rhythm(3 / 4)} 0` }}\n        >\n          Standout episodes of the year\n        </h4>\n      </header>\n      <p>\n        The top 5 episodes rating in at {standOutRating} or above.\n        <br /> Ordered by rating desc, rating difference to overall series\n        rating desc, and title asc.\n      </p>\n      {items.length ? (\n        <Table headers={standoutHeaders}>\n          {() =>\n            items\n              .sort(orderStandoutEpisodes)\n              .slice(0, 5)\n              .map((x, i) => {\n                const number = i + 1;\n                const image = getImage(x.image);\n                const season = `${x.season.season} ${x.season.year}`;\n                const hasRating = x.rating > 0;\n                const diffMessage = hasRating\n                  ? 'Rating difference is the episode rating minus the series rating.'\n                  : 'Rating difference cannot be calculated as the series does not currently have a rating.';\n\n                return (\n                  <tr key={x.episodeId}>\n                    <td column-title=\"#\" className=\"cell cell--rhs\">\n                      <div\n                        style={{\n                          display: 'flex',\n                          flexDirection: 'column',\n                          justifyContent: 'space-between'\n                        }}\n                      >\n                        <div>{number}</div>\n                        <div style={{ fontSize: `0.75rem` }}>{season}</div>\n                      </div>\n                    </td>\n                    <td column-title=\"Title\" className=\"cell\">\n                      <div style={{ display: 'flex' }}>\n                        <GatsbyImage\n                          style={{ flex: `0 0 96px` }}\n                          image={image}\n                          alt={x.title}\n                        />\n                        <div style={{ margin: `0 ${rhythm(1 / 2)}` }}>\n                          <NewTabLink\n                            style={{\n                              display: 'flex',\n                              justifyContent: 'flex-start'\n                            }}\n                            href={`https://myanimelist.net/anime/${x.malId}`}\n                          >\n                            {x.title}\n                          </NewTabLink>\n                          <div style={{ fontSize: `0.75rem` }}>\n                            Episode {x.episode.episode}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td\n                      column-title=\"Episode Rating\"\n                      className=\"cell cell--rhs\"\n                    >\n                      {x.episode.rating}\n                    </td>\n                    <td\n                      column-title=\"Rating Difference\"\n                      className=\"cell cell--rhs\"\n                      aria-label={diffMessage}\n                      title={diffMessage}\n                    >\n                      {hasRating ? x.episode.rating - x.rating : 'N/A'}\n                    </td>\n                  </tr>\n                );\n              })\n          }\n        </Table>\n      ) : (\n        <div>This year saw no stand out episodes.</div>\n      )}\n    </section>\n  );\n}\n\nStandoutSection.propTypes = {\n  sectionId: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default StandoutSection;\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { Link } from 'gatsby';\n\nimport Tickbox from 'meiko/Tickbox';\n\nimport HGTable from '@/components/Table/HGTable';\nimport PageAnchor from '@/components/PageAnchor';\nimport SeasonSection from './SeasonSection';\nimport StandoutSection from './StandoutSection';\n\nimport { useMountedOnClient } from '@/hooks/useMountedOnClient';\nimport storage from '@/utils/storage';\nimport seriesSorter from '@/utils/seriesSorter';\nimport reduceNestedList from '@/utils/reduceNestedList';\nimport averageRatedTotal from '@/utils/averageRatedTotal';\nimport generateSeriesStatistics from '@/utils/generateSeriesStatistics';\nimport getSeasonName from '@/utils/getSeasonName';\nimport { rhythm } from '@/utils/typography';\nimport { selectTop, generateSeriesForEpisode } from './utils';\n\nfunction YearSection({ title, items, messages }) {\n  const mounted = useMountedOnClient();\n  const [hideCarryOvers, setHideCarryOvers] = useState(false);\n\n  const sectionId = `section_${title}`;\n  const seasonCount = items.length;\n  const hasAllSeasons = seasonCount === 4;\n  const hideCarryOversId = `hideCarryOvers_${title}`;\n\n  const seasons = items.map((x) => ({\n    season: x.season,\n    items: generateSeriesStatistics(\n      getSeasonName(x.season),\n      x.series,\n      x.episodes\n    ).sort(seriesSorter)\n  }));\n\n  const allSeries = reduceNestedList(items, 'series');\n  const allEpisodes = reduceNestedList(items, 'episodes');\n  const allSeasons = generateSeriesStatistics(\n    title,\n    allSeries,\n    allEpisodes\n  ).sort(seriesSorter);\n\n  const { average, ratedCount } = averageRatedTotal({ series: allSeasons });\n\n  const standOutRating = storage.getKey('standoutEpisodeRating');\n  const standOutEpisodes = generateSeriesForEpisode(\n    title,\n    allSeries,\n    allEpisodes.filter((x) => x.rating >= standOutRating)\n  ).filter((x) => !x.isCarryOver || !hideCarryOvers);\n\n  return (\n    <section\n      id={sectionId}\n      style={{\n        padding: `0 ${rhythm(3 / 4)} ${rhythm(1 / 8)}`,\n        margin: `${rhythm(1)} 0`\n      }}\n    >\n      <header\n        style={{\n          display: 'flex',\n          alignItems: 'center'\n        }}\n      >\n        <PageAnchor id={sectionId} />\n        <Link\n          to={`/${title}/`}\n          style={{\n            textDecoration: 'none',\n            color: 'inherit'\n          }}\n        >\n          <h3 className=\"season-link\" style={{ margin: `${rhythm(3 / 4)} 0` }}>\n            {title}\n            {hasAllSeasons ? ' - Overview' : ''}\n          </h3>\n        </Link>\n        <div className=\"flex-spacer\"></div>\n        {mounted && (\n          <div>\n            <Tickbox\n              className=\"hide-carry-overs\"\n              id={hideCarryOversId}\n              name={hideCarryOversId}\n              checked={hideCarryOvers}\n              text={' Hide carry overs'}\n              onChange={(e) => setHideCarryOvers((p) => !p)}\n            />\n          </div>\n        )}\n      </header>\n\n      <p>\n        {isNaN(average)\n          ? `Average rating unavailable`\n          : `Average: ${average} for ${ratedCount} rated series`}\n      </p>\n\n      {!hasAllSeasons && (\n        <p>\n          Once all seasons for the year are available, a top 5 ranking for the\n          year table will be displayed.\n          <br /> Below are top 3 rankings for each season in {title}. <br />\n          Unfinished seasons will not display the overall rating column.\n        </p>\n      )}\n      {hasAllSeasons && (\n        <React.Fragment>\n          <p>\n            Below is a top 5 ranking for the year of {title}.\n            <br />\n            Following that each individual season for {title} has a top 3\n            ranking.\n          </p>\n          <HGTable\n            items={selectTop(allSeasons, { top: 5, hideCarryOvers })}\n            getSeason={(_, season) => `${season.season} ${season.year}`}\n          />\n        </React.Fragment>\n      )}\n\n      {seasons.map((entry, i) => {\n        const name = getSeasonName(entry.season, false);\n        const seasonalMessages = messages.filter((x) =>\n          x.seasons.includes(entry.season)\n        );\n\n        return (\n          <SeasonSection\n            key={entry.season}\n            slug={`/${entry.season}/`}\n            title={`${name} ${title}`}\n            items={entry.items}\n            hideCarryOvers={hideCarryOvers}\n            hideRatingColumn={i + 1 >= seasonCount}\n            messages={seasonalMessages}\n          />\n        );\n      })}\n\n      {hasAllSeasons && (\n        <StandoutSection sectionId={sectionId} items={standOutEpisodes} />\n      )}\n    </section>\n  );\n}\n\nYearSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      message: PropTypes.string.isRequired,\n      seasons: PropTypes.arrayOf(PropTypes.string).isRequired\n    })\n  )\n};\n\nexport default YearSection;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport groupBy from 'ayaka/groupBy';\n\nimport Layout from '@/components/AppLayout';\nimport SEO from '@/components/AppSEO';\nimport YearSection from '@/components/Honours/YearSection';\n\nexport default function HonoursPage({ data }) {\n  const messages = data.allInformationJson.nodes ?? [];\n  const seasons = data.allDataJson.nodes ?? [];\n  const groups = groupBy(seasons, (x) => x.season.split('-')[0]);\n  const years = Array.from(groups.entries());\n\n  return (\n    <Layout>\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <SEO title=\"Honours\" />\n      <div>\n        <header>\n          <h2>Honours</h2>\n        </header>\n        <p>\n          Below are the best series of each season that currently has data on\n          the site.\n          <br /> These are automated based on the on the sort order of average\n          desc, rating desc, mode desc, and title asc.\n        </p>\n        {years.map(([year, items]) => (\n          <YearSection\n            key={year}\n            title={year}\n            items={items}\n            messages={messages}\n          />\n        ))}\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  {\n    allInformationJson {\n      nodes {\n        key\n        type\n        message\n        yearMessage\n        seasons\n      }\n    }\n    allDataJson(sort: { order: DESC, fields: season }) {\n      nodes {\n        season\n        series {\n          id\n          title\n          image {\n            childImageSharp {\n              gatsbyImageData(width: 96, height: 150, layout: FIXED)\n            }\n          }\n          malId\n          rating\n          totalEpisodes\n          season {\n            year\n            season\n          }\n        }\n        episodes {\n          id\n          date\n          episode\n          rating\n          animeId\n        }\n      }\n    }\n  }\n`;\n"],"names":["list","keyGetter","x","map","Map","forEach","item","key","collection","get","push","set","PageAnchor","id","props","style","margin","href","Icons","displayName","selectTop","items","opts","n","top","hide","hideCarryOvers","includeUserSettingFilters","hasMinEpisodes","minEpisodes","noEnding","totalEpisodes","wontFinish","Math","max","episodes","episode","isCarryOver","slice","orderStandoutEpisodes","a","b","av","rating","bv","ad","bd","title","localeCompare","slug","messages","sectionId","replace","rows","average","ratedCount","averageRatedTotal","series","rhythm","display","alignItems","Link","to","textDecoration","color","className","capitalise","isNaN","Messages","HGTable","hideSeason","standoutHeaders","text","textAlign","standOutRating","storage","standOutSectionId","length","Table","headers","sort","i","number","image","getImage","season","year","hasRating","diffMessage","episodeId","flexDirection","justifyContent","fontSize","G","flex","alt","NewTabLink","malId","mounted","useMountedOnClient","setHideCarryOvers","useState","seasonCount","hasAllSeasons","hideCarryOversId","seasons","generateSeriesStatistics","getSeasonName","seriesSorter","allSeries","reduceNestedList","allEpisodes","allSeasons","standOutEpisodes","yearOrSeasonName","isYear","data","find","s","animeId","itemSeason","generateSeriesForEpisode","filter","padding","Tickbox","name","checked","onChange","e","p","getSeason","_","entry","seasonalMessages","includes","hideRatingColumn","HonoursPage","allInformationJson","nodes","allDataJson","groups","groupBy","split","years","Array","from","entries"],"sourceRoot":""}