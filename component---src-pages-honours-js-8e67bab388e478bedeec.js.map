{"version":3,"sources":["webpack:///./src/pages/honours.js","webpack:///./src/utils/groupBy.js"],"names":["seasonNumbers","Object","keys","seasonNames","sort","reverse","SubSection","slug","title","props","style","margin","rhythm","to","textDecoration","color","className","capitalise","HGTable","hideSeason","Section","items","seasonCount","map","num","some","x","season","filter","length","hasAllSeasons","Fragment","slice","i","key","hideRatingColumn","groups","list","keyGetter","Map","forEach","item","collection","get","push","set","groupBy","data","allDataJson","nodes","split","years","Array","from","entries","reduce","p","c","series","seriesSorter","Layout","SEO","year","query"],"mappings":"ktBAaA,IAAMA,EAAgBC,OAAOC,KAAKC,KAC/BC,OACAC,UAEH,SAASC,EAAT,GAAgD,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAUC,E,oIAAS,qBAC7C,OACE,6BAASC,MAAO,CAAEC,OAAWC,YAAO,GAAZ,OACtB,gCACE,kBAAC,OAAD,CACEC,GAAIN,EACJG,MAAO,CACLI,eAAgB,OAChBC,MAAO,YAGT,wBAAIC,UAAU,eAAeC,YAAWT,MAG5C,kBAACU,EAAA,EAAD,eAASC,YAAU,GAAKV,KAK9B,SAASW,EAAT,GAAoC,IAAjBZ,EAAgB,EAAhBA,MAAOa,EAAS,EAATA,MAClBC,EAActB,EACjBuB,KAAI,SAACC,GAAD,OACHH,EAAMI,MAAK,SAACC,GAAD,OAAOA,EAAEC,SAAcnB,EAAhB,IAAyBgB,KAASA,EAAM,QAE3DI,QAAO,SAACF,GAAD,OAAa,OAANA,KAAYG,OAEvBC,EAAgC,IAAhBR,EAEtB,OACE,6BAASZ,MAAO,CAAEC,OAAWC,YAAO,GAAZ,OACtB,gCACE,kBAAC,OAAD,CACEC,GAAE,IAAML,EAAN,IACFE,MAAO,CACLI,eAAgB,OAChBC,MAAO,YAGT,wBAAIC,UAAU,eACXR,EACAsB,EAAgB,cAAgB,OAKrCA,GACA,gIAGE,6BAHF,gDAGsDtB,EAHtD,KAG8D,6BAH9D,kEAODsB,GACC,kBAAC,IAAMC,SAAP,KACE,uEAC4CvB,EAD5C,IAEE,6BAFF,6CAG6CA,EAH7C,yBAMA,kBAACU,EAAA,EAAD,CAASG,MAAOA,EAAMW,MAAM,EAAG,MAIlChC,EAAcuB,KAAI,SAACC,EAAKS,GACvB,IAAMN,EAAYnB,EAAN,IAAegB,EAE3B,OAAKH,EAAMI,MAAK,SAACC,GAAD,OAAOA,EAAEC,SAAWA,KAKlC,kBAACrB,EAAD,CACE4B,IAAKV,EACLjB,KAAI,IAAMoB,EAAN,IACJnB,MAAOL,IAAYqB,GACnBH,MAAOA,EAAMO,QAAO,SAACF,GAAD,OAAOA,EAAEC,SAAWA,KAAQK,MAAM,EAAG,GACzDG,iBAAkBF,EAAI,GAAKX,IATtB,SAiBF,sBAAe,IAAD,EAErBc,ECzGO,SAAiBC,EAAMC,QAAsB,IAAtBA,MAAY,SAACZ,GAAD,OAAOA,IACvD,IAAMH,EAAM,IAAIgB,IAahB,OAXAF,EAAKG,SAAQ,SAACC,GACZ,IAAMP,EAAMI,EAAUG,GAChBC,EAAanB,EAAIoB,IAAIT,GAEtBQ,EAGHA,EAAWE,KAAKH,GAFhBlB,EAAIsB,IAAIX,EAAK,CAACO,OAMXlB,ED2FQuB,CADF,UADc,EAAXC,KACKC,YAAYC,aAApB,QAA6B,IACV,SAACvB,GAAD,OAAOA,EAAEC,OAAOuB,MAAM,KAAK,MAErDC,EAAQC,MAAMC,KAAKjB,EAAOkB,WAAW/B,KAAI,kBAAkB,CAAlB,UAG1CgC,QACC,SAACC,EAAGC,GAAJ,kBAAcD,GAAd,EAAoBC,EAAEC,OAAOnC,KAAI,SAACG,GAAD,wBAAaA,EAAb,CAAgBC,OAAQ8B,EAAE9B,gBAC3D,IAEDvB,KAAKuD,SAGV,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKrD,MAAM,YACX,6BACE,gCACE,wCAEF,2GAGE,6BAHF,+GAMC2C,EAAM5B,KAAI,gBAAEuC,EAAF,KAAQzC,EAAR,YACT,kBAACD,EAAD,CAASc,IAAK4B,EAAMtD,MAAOsD,EAAMzC,MAAOA,UA5BnC,IAmCF0C,EAAK","file":"component---src-pages-honours-js-8e67bab388e478bedeec.js","sourcesContent":["import React from 'react';\r\nimport { graphql, Link } from 'gatsby';\r\n\r\nimport Layout from '@/components/Layout';\r\nimport SEO from '@/components/SEO';\r\nimport HGTable from '@/components/Table/HGTable';\r\n\r\nimport groupBy from '@/utils/groupBy';\r\nimport seriesSorter from '@/utils/seriesSorter';\r\nimport { rhythm } from '@/utils/typography';\r\nimport { capitalise } from '@/utils/helpers';\r\nimport { seasonNames } from '@/consts';\r\n\r\nconst seasonNumbers = Object.keys(seasonNames)\r\n  .sort()\r\n  .reverse();\r\n\r\nfunction SubSection({ slug, title, ...props }) {\r\n  return (\r\n    <section style={{ margin: `${rhythm(1)} 0` }}>\r\n      <header>\r\n        <Link\r\n          to={slug}\r\n          style={{\r\n            textDecoration: 'none',\r\n            color: 'inherit'\r\n          }}\r\n        >\r\n          <h4 className=\"season-link\">{capitalise(title)}</h4>\r\n        </Link>\r\n      </header>\r\n      <HGTable hideSeason {...props} />\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction Section({ title, items }) {\r\n  const seasonCount = seasonNumbers\r\n    .map((num) =>\r\n      items.some((x) => x.season === `${title}-${num}`) ? num : null\r\n    )\r\n    .filter((x) => x !== null).length;\r\n\r\n  const hasAllSeasons = seasonCount === 4;\r\n\r\n  return (\r\n    <section style={{ margin: `${rhythm(1)} 0` }}>\r\n      <header>\r\n        <Link\r\n          to={`/${title}/`}\r\n          style={{\r\n            textDecoration: 'none',\r\n            color: 'inherit'\r\n          }}\r\n        >\r\n          <h3 className=\"season-link\">\r\n            {title}\r\n            {hasAllSeasons ? ' - Overview' : ''}\r\n          </h3>\r\n        </Link>\r\n      </header>\r\n\r\n      {!hasAllSeasons && (\r\n        <p>\r\n          Once all seasons for the year are available, a top 5 ranking for the\r\n          year table will be displayed.\r\n          <br /> Below are top 3 rankings for each season in {title}. <br />\r\n          Unfinished seasons will not display the overall rating column.\r\n        </p>\r\n      )}\r\n      {hasAllSeasons && (\r\n        <React.Fragment>\r\n          <p>\r\n            Below is a top 5 ranking for the year of {title}.\r\n            <br />\r\n            Following that each individual season for {title} has a top 3\r\n            ranking.\r\n          </p>\r\n          <HGTable items={items.slice(0, 5)} />\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {seasonNumbers.map((num, i) => {\r\n        const season = `${title}-${num}`;\r\n\r\n        if (!items.some((x) => x.season === season)) {\r\n          return null;\r\n        }\r\n\r\n        return (\r\n          <SubSection\r\n            key={num}\r\n            slug={`/${season}/`}\r\n            title={seasonNames[num]}\r\n            items={items.filter((x) => x.season === season).slice(0, 3)}\r\n            hideRatingColumn={i + 1 >= seasonCount}\r\n          />\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ({ data }) => {\r\n  const seasons = data.allDataJson.nodes ?? [];\r\n  const groups = groupBy(seasons, (x) => x.season.split('-')[0]);\r\n\r\n  const years = Array.from(groups.entries()).map(([key, items]) => [\r\n    key,\r\n    items\r\n      .reduce(\r\n        (p, c) => [...p, ...c.series.map((x) => ({ ...x, season: c.season }))],\r\n        []\r\n      )\r\n      .sort(seriesSorter)\r\n  ]);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Honours\" />\r\n      <div>\r\n        <header>\r\n          <h2>Honours</h2>\r\n        </header>\r\n        <p>\r\n          Below are the best series of each season that currently has data on\r\n          the site.\r\n          <br /> These are automated based on the on the sort order of average\r\n          desc, rating desc, mode desc, and title asc.\r\n        </p>\r\n        {years.map(([year, items]) => (\r\n          <Section key={year} title={year} items={items} />\r\n        ))}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allDataJson(\r\n      filter: { date: { eq: null } }\r\n      sort: { order: DESC, fields: season }\r\n    ) {\r\n      nodes {\r\n        id\r\n        season\r\n        series {\r\n          id\r\n          title\r\n          image {\r\n            childImageSharp {\r\n              fixed(width: 96, height: 150) {\r\n                ...GatsbyImageSharpFixed\r\n              }\r\n            }\r\n          }\r\n          malId\r\n          rating\r\n          average\r\n          highest\r\n          lowest\r\n          mode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export default function groupBy(list, keyGetter = (x) => x) {\r\n  const map = new Map();\r\n\r\n  list.forEach((item) => {\r\n    const key = keyGetter(item);\r\n    const collection = map.get(key);\r\n\r\n    if (!collection) {\r\n      map.set(key, [item]);\r\n    } else {\r\n      collection.push(item);\r\n    }\r\n  });\r\n\r\n  return map;\r\n}\r\n"],"sourceRoot":""}