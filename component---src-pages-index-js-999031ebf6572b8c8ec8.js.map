{"version":3,"sources":["webpack:///./src/components/Personal.js","webpack:///./src/pages/index.js"],"names":["Personal","data","useStaticQuery","info","site","siteMetadata","avatar","profilePic","childImageSharp","adjective","words","Math","floor","random","length","style","display","alignItems","marginBottom","rhythm","alt","author","marginRight","borderRadius","maxWidth","href","malUrl","target","rel","IndexItem","slug","text","to","textDecoration","color","marginTop","className","fontSize","margin","currentYear","Date","getFullYear","toString","seasonal","allDataJson","nodes","yearCount","map","x","season","slice","filter","i","a","indexOf","title","id","listStyleType","reduce","p","node","year","hasFullYear","includes","key","fields","getSeasonName","query"],"mappings":"8PA8DeA,MAnDf,WACE,IAAMC,EAAOC,yBAAe,aAkBtBC,EAAOF,EAAKG,KAAKC,aACjBC,EAASL,EAAKM,WAAWC,gBACzBC,EAxBCC,IAAMC,KAAKC,MAAMD,KAAKE,SAAWH,IAAMI,SA0B9C,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,aAAcC,YAAO,KAGvB,kBAAC,IAAD,iBACMb,EADN,CAEEc,IAAKjB,EAAKkB,OACVN,MAAO,CACLO,YAAaH,YAAO,EAAI,GACxBD,aAAc,EACdK,aAAc,UAGlB,uBAAGR,MAAO,CAAES,SAAU,IAAKN,aAAc,IAAzC,0BAC0B,IACxB,uBAAGO,KAAMtB,EAAKuB,OAAQC,OAAO,SAASC,IAAI,uBACvCzB,EAAKkB,QAHV,eAKeZ,EALf,Y,YCzCN,SAASoB,EAAT,GAAoC,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACzB,OACE,wBAAIhB,MAAO,CAAEC,QAAS,SACpB,kBAAC,OAAD,CACEgB,GAAIF,EACJf,MAAO,CACLkB,eAAgB,OAChBC,MAAO,UACPC,UAAWhB,YAAO,GAClBD,aAAcC,YAAO,EAAI,KAG3B,wBACEiB,UAAU,cACVrB,MAAO,CACLsB,SAAUlB,YAAO,GACjBmB,OAAQ,IAGTP,KAOI,sBAAe,IAAZ9B,EAAW,EAAXA,KACVsC,GAAc,IAAIC,MAAOC,cAAcC,WAEvCC,EADO1C,EAAK2C,YACIC,MAEhBC,EAAYH,EACfI,KAAI,SAACC,GAAD,OAAOA,EAAEC,OAAOC,MAAM,EAAG,MAC7BC,QAAO,SAACH,EAAGI,EAAGC,GAAP,OAAaA,EAAEC,QAAQN,KAAOI,KAAGtC,OAE3C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKyC,MAAM,SACX,+BACE,kBAAC,EAAD,OAGF,6BACE,wBAAIC,GAAG,WACL,kBAAC,OAAD,CAAMxB,GAAG,aAAT,mBAEF,6BACGW,EAAS7B,OADZ,kBACmCgC,EADnC,UAGA,wBACE/B,MAAO,CAAE0C,cAAe,OAAQnB,OAAQ,EAAGpB,aAAcC,YAAO,KAE/DwB,EAASe,QAAO,SAACC,EAAGC,GACnB,IAAMC,EAAOD,EAAKX,OAAOC,MAAM,EAAG,GAC5BY,EACJF,EAAKX,OAAOc,SAAS,QAAUF,IAAStB,EAE1C,MAAM,GAAN,mBACKoB,GADL,CAEEG,GACE,kBAACjC,EAAD,CACEmC,IAAQJ,EAAKJ,GAAV,QACH1B,KAAI,IAAM+B,EAAN,IACJ9B,KAAS8B,EAAL,cAGR,kBAAChC,EAAD,CACEmC,IAAKJ,EAAKJ,GACV1B,KAAM8B,EAAKK,OAAOnC,KAClBC,KAAMmC,YAAcN,EAAKX,cAG5B,QA9CE,IAqDFkB,EAAK","file":"component---src-pages-index-js-999031ebf6572b8c8ec8.js","sourcesContent":["import React from 'react';\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\n\r\nimport { words } from '../consts';\r\nimport { rhythm } from '../utils/typography';\r\n\r\nfunction getRandomAdj() {\r\n  return words[Math.floor(Math.random() * words.length)];\r\n}\r\n\r\nfunction Personal() {\r\n  const data = useStaticQuery(graphql`\r\n    query PersonalMetaQuery {\r\n      site {\r\n        siteMetadata {\r\n          author\r\n          malUrl\r\n        }\r\n      }\r\n      profilePic: file(name: { eq: \"profile-pic\" }) {\r\n        childImageSharp {\r\n          fixed(width: 75, height: 75, cropFocus: NORTH) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const info = data.site.siteMetadata;\r\n  const avatar = data.profilePic.childImageSharp;\r\n  const adjective = getRandomAdj();\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: rhythm(1)\r\n      }}\r\n    >\r\n      <Img\r\n        {...avatar}\r\n        alt={info.author}\r\n        style={{\r\n          marginRight: rhythm(1 / 3),\r\n          marginBottom: 0,\r\n          borderRadius: '50%'\r\n        }}\r\n      />\r\n      <p style={{ maxWidth: 290, marginBottom: 0 }}>\r\n        Seasonal rating data by{' '}\r\n        <a href={info.malUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {info.author}\r\n        </a>\r\n        . Behold my {adjective} taste\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Personal;\r\n","import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\n\r\nimport Layout from '@/components/AppLayout';\r\nimport SEO from '@/components/AppSEO';\r\nimport Personal from '@/components/Personal';\r\n\r\nimport { rhythm } from '../utils/typography';\r\nimport getSeasonName from '../utils/getSeasonName';\r\n\r\nfunction IndexItem({ slug, text }) {\r\n  return (\r\n    <li style={{ display: 'flex' }}>\r\n      <Link\r\n        to={slug}\r\n        style={{\r\n          textDecoration: 'none',\r\n          color: 'inherit',\r\n          marginTop: rhythm(1),\r\n          marginBottom: rhythm(1 / 4)\r\n        }}\r\n      >\r\n        <h3\r\n          className=\"season-link\"\r\n          style={{\r\n            fontSize: rhythm(1),\r\n            margin: 0\r\n          }}\r\n        >\r\n          {text}\r\n        </h3>\r\n      </Link>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ({ data }) => {\r\n  const currentYear = new Date().getFullYear().toString();\r\n  const info = data.allDataJson;\r\n  const seasonal = info.nodes;\r\n\r\n  const yearCount = seasonal\r\n    .map((x) => x.season.slice(0, 4))\r\n    .filter((x, i, a) => a.indexOf(x) === i).length;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Home\" />\r\n      <aside>\r\n        <Personal />\r\n      </aside>\r\n\r\n      <div>\r\n        <h2 id=\"history\">\r\n          <Link to=\"/#history\">Season History</Link>\r\n        </h2>\r\n        <div>\r\n          {seasonal.length} seasons, over {yearCount} years\r\n        </div>\r\n        <ul\r\n          style={{ listStyleType: 'none', margin: 0, marginBottom: rhythm(4) }}\r\n        >\r\n          {seasonal.reduce((p, node) => {\r\n            const year = node.season.slice(0, 4);\r\n            const hasFullYear =\r\n              node.season.includes('-10') && year !== currentYear;\r\n\r\n            return [\r\n              ...p,\r\n              hasFullYear && (\r\n                <IndexItem\r\n                  key={`${node.id}-year`}\r\n                  slug={`/${year}/`}\r\n                  text={`${year} Overview`}\r\n                />\r\n              ),\r\n              <IndexItem\r\n                key={node.id}\r\n                slug={node.fields.slug}\r\n                text={getSeasonName(node.season)}\r\n              />\r\n            ];\r\n          }, [])}\r\n        </ul>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allDataJson(sort: { fields: [season], order: DESC }) {\r\n      totalCount\r\n      nodes {\r\n        id\r\n        season\r\n        fields {\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}