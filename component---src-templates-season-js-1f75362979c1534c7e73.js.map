{"version":3,"sources":["webpack:///./src/templates/season.js","webpack:///./src/utils/averageRatedTotal.js","webpack:///./src/components/Table.js","webpack:///./src/components/Navigation.js","webpack:///./src/components/YearOverview.js","webpack:///./src/components/BaseTemplate.js","webpack:///./src/utils/getSeriesStats.js"],"names":["__webpack_exports__","_ref","data","props","_objectWithoutPropertiesLoose","entry","dataJson","seasonName","getSeasonName","season","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_components_BaseTemplate__WEBPACK_IMPORTED_MODULE_6__","Object","assign","title","series","query","__webpack_require__","d","averageRatedTotal","_helpers__WEBPACK_IMPORTED_MODULE_0__","rated","filter","x","rating","ratedCount","length","average","roundToTwo","reduce","p","c","seriesCount","Table","style","headers","children","react_default","map","_ref2","text","key","defaultProps","Navigation","next","previous","display","flexWrap","justifyContent","listStyle","padding","gatsby_browser_entry","to","fields","slug","rel","marginRight","isYear","year","rhsAlign","textAlign","YearOverview","sorted","sort","b","components_Table","column-title","className","seasonHeaders","seriesSorter","mode","BaseTemplate","overview","hideRatingColumn","customDescriptiveText","pageContext","tableHeaders","_averageRatedTotal","items","Layout","SEO","components_YearOverview","whiteSpace","s","i","highest","lowest","number","stats","episodes","id","flexDirection","gatsby_image_default","flex","image","childImageSharp","NewTabLink","margin","rhythm","href","malId","components_Navigation"],"mappings":"yMAMeA,EAAA,iBAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAASC,sIAAYC,CAAAH,EAAA,UAC/BI,EAAQH,EAAKI,SACbC,EAAaC,YAAcH,EAAMI,QAEvC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,GAAkBZ,EAAlB,CAAyBa,MAAOT,EAAYU,OAAQZ,EAAMY,WAG5D,IAAMC,EAAK,+CCblBC,EAAAC,EAAApB,EAAA,sBAAAqB,IAAA,IAAAC,EAAAH,EAAA,KAEe,SAASE,EAATpB,GAA+C,IAAlBQ,EAAkBR,EAAlBQ,OAAQQ,EAAUhB,EAAVgB,OAC5CM,EAAQN,EAAOO,OAAO,SAACC,GAAD,OAAoB,IAAbA,EAAEC,SAC/BC,EAAaJ,EAAMK,OACnBC,EAAUC,YACdP,EAAMQ,OAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEP,QAAQ,GAAKC,GAG5C,MAAO,CACLlB,SACAyB,YAAajB,EAAOW,OACpBD,aACAE,wRCTJ,SAASM,EAATlC,GAAuD,IAAtCmC,EAAsCnC,EAAtCmC,MAAOC,EAA+BpC,EAA/BoC,QAASC,EAAsBrC,EAAtBqC,SAAanC,EAASC,EAAAH,EAAA,gCACrD,OACEsC,EAAA5B,EAAAC,cAAA,QAAAE,OAAAC,OAAA,CAAOqB,MAAKtB,OAAAC,OAAA,GAAOqB,IAAajC,GAC9BoC,EAAA5B,EAAAC,cAAA,aACE2B,EAAA5B,EAAAC,cAAA,UACGyB,EAAQG,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAASjB,EAAZrB,EAAAqC,EAAA,iBACXF,EAAA5B,EAAAC,cAAA,KAAAE,OAAAC,OAAA,CAAI4B,IAAKD,GAAUjB,EAAnB,CAAsBW,MAAKtB,OAAAC,OAAA,GAAQU,EAAEW,OAAS,MAC3CM,OAKTH,EAAA5B,EAAAC,cAAA,aAAQ0B,GAAYA,MAK1BH,EAAMS,aAAe,CAAER,MAAO,IAWfD,mCCsBAU,MAhDf,SAAA5C,GAAwC,IAAlB6C,EAAkB7C,EAAlB6C,KAAMC,EAAY9C,EAAZ8C,SAC1B,OACER,EAAA5B,EAAAC,cAAA,WACE2B,EAAA5B,EAAAC,cAAA,MACEwB,MAAO,CACLY,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXb,EAAA5B,EAAAC,cAAA,UACGmC,GACCR,EAAA5B,EAAAC,cAACyC,EAAA,EAAD,CACEC,GAAIP,EAASQ,OAAOC,KACpBC,IAAI,OACJrB,MAAO,CAAEsB,YAAa,KAHxB,IAKI,IACDX,EAASY,OACHZ,EAASa,KADf,YAEGpD,YAAcuC,EAAStC,UAIjC8B,EAAA5B,EAAAC,cAAA,UACGkC,GACCP,EAAA5B,EAAAC,cAACyC,EAAA,EAAD,CAAMC,GAAIR,EAAKS,OAAOC,KAAMC,IAAI,QAC7BX,EAAKa,OACCb,EAAKc,KADX,YAEGpD,YAAcsC,EAAKrC,QAAS,IAHlC,SC3BNoD,EAAW,CAAEC,UAAW,SACxBzB,EAAU,CACd,CAAEK,KAAM,IACR,CAAEA,KAAM,QAASN,MAAKtB,OAAAC,OAAA,GAAO8C,IAC7B,CAAEnB,KAAM,QAASN,MAAKtB,OAAAC,OAAA,GAAO8C,IAC7B,CAAEnB,KAAM,iBAAkBN,MAAKtB,OAAAC,OAAA,GAAO8C,KAkCzBE,MA/Bf,SAAA9D,GAAgC,IACxB+D,EADwB/D,EAARC,KACF+D,KAAK,SAACtD,EAAGuD,GAAJ,OAAWvD,EAAEF,OAASyD,EAAEzD,OAAS,GAAK,IAE/D,OACE8B,EAAA5B,EAAAC,cAAA,WACE2B,EAAA5B,EAAAC,cAACuD,EAAD,CAAO9B,QAASA,GACb,kBACC2B,EAAOxB,IAAI,SAAC/B,GAAD,OACT8B,EAAA5B,EAAAC,cAAA,MAAI+B,IAAKlC,EAAOA,QACd8B,EAAA5B,EAAAC,cAAA,UACE2B,EAAA5B,EAAAC,cAACyC,EAAA,EAAD,CAAMC,GAAE,IAAM7C,EAAOA,QAClBD,YAAcC,EAAOA,QAAQ,KAGlC8B,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,QAAQC,UAAU,kBAChC5D,EAAOyB,aAEVK,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,QAAQC,UAAU,kBAChC5D,EAAOkB,YAEVY,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,iBAAiBC,UAAU,kBACzC5D,EAAOoB,+CCpBlBgC,EAAW,CAAEC,UAAW,SACxBQ,EAAgB,CACpB,CAAE5B,KAAM,IAAKN,MAAKtB,OAAAC,OAAA,GAAO8C,IACzB,CAAEnB,KAAM,SACR,CAAEA,KAAM,SAAUN,MAAKtB,OAAAC,OAAA,GAAO8C,IAC9B,CAAEnB,KAAM,UAAWN,MAAKtB,OAAAC,OAAA,GAAO8C,IAC/B,CAAEnB,KAAM,UAAWN,MAAKtB,OAAAC,OAAA,GAAO8C,IAC/B,CAAEnB,KAAM,SAAUN,MAAKtB,OAAAC,OAAA,GAAO8C,IAC9B,CAAEnB,KAAM,OAAQN,MAAKtB,OAAAC,OAAA,GAAO8C,KAIxBU,EAAe,SAAC5D,EAAGuD,GAAJ,OACnBA,EAAErC,QAAUlB,EAAEkB,SAAWqC,EAAExC,OAASf,EAAEe,QAAUwC,EAAEM,KAAO7D,EAAE6D,MAAQ,GAErE,SAASC,EAATxE,GAOG,IANDe,EAMCf,EANDe,MACAC,EAKChB,EALDgB,OACAyD,EAICzE,EAJDyE,SACAC,EAGC1E,EAHD0E,iBACAC,EAEC3E,EAFD2E,sBACAC,EACC5E,EADD4E,YAEMC,EAAeH,EACjBL,EAAc9C,OAAO,SAACC,GAAD,MAAO,WAAAA,EAAEiB,OAC9B4B,EAHHS,EAK+B1D,YAAkB,CAAEJ,WAA5CY,EALPkD,EAKOlD,QAASF,EALhBoD,EAKgBpD,WACXqD,EAAQ/D,EAAOgD,KAAKM,GAE1B,OACEhC,EAAA5B,EAAAC,cAACqE,EAAA,EAAD,KACE1C,EAAA5B,EAAAC,cAACsE,EAAA,EAAD,CAAKlE,MAAOA,IACZuB,EAAA5B,EAAAC,cAAA,WACE2B,EAAA5B,EAAAC,cAAA,UAAKI,KACFW,GACDY,EAAA5B,EAAAC,cAAA,qBACYiB,EADZ,QAC0BF,EAD1B,iBAID+C,GAAYnC,EAAA5B,EAAAC,cAACuE,EAAD,CAAcjF,KAAMwE,IACjCnC,EAAA5B,EAAAC,cAAA,KAAGwB,MAAO,CAAEgD,WAAY,aACrBR,GACCD,GAAD,4JAGA,OALH,2GAQApC,EAAA5B,EAAAC,cAACuD,EAAD,CAAO9B,QAASyC,GACb,kBACCE,EAAMxC,IAAI,SAAC6C,EAAGC,GACZ,IClECrF,EACbyB,EACAG,EACA0D,EACAC,EACAhB,ED6DkBiB,EAASH,EAAI,EACbI,GClElBhE,GADazB,EDmE4BoF,GClEzC3D,OACAG,EAKC5B,EALD4B,QACA0D,EAICtF,EAJDsF,QACAC,EAGCvF,EAHDuF,OACAhB,EAECvE,EAFDuE,KAECvE,EADD0F,SAEO,CACLjE,OAAQA,GAAU,IAClBG,QAASC,YAAWD,GACpB0D,UACAC,SACAhB,SDwDU,OACEjC,EAAA5B,EAAAC,cAAA,MAAI+B,IAAK0C,EAAEO,IACTrD,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,IAAIC,UAAU,kBAC7B9B,EAAA5B,EAAAC,cAAA,OACEwB,MAAO,CACLY,QAAS,OACT6C,cAAe,SACf3C,eAAgB,kBAGlBX,EAAA5B,EAAAC,cAAA,WAAM6E,GACLJ,EAAE5E,QAAU8B,EAAA5B,EAAAC,cAAA,WAAMJ,YAAc6E,EAAE5E,QAAQ,MAG/C8B,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,QAAQC,UAAU,QACjC9B,EAAA5B,EAAAC,cAAA,OAAKwB,MAAO,CAAEY,QAAS,SACrBT,EAAA5B,EAAAC,cAACkF,EAAAnF,EAADG,OAAAC,OAAA,CACEqB,MAAO,CAAE2D,KAAI,aACTV,EAAEW,MAAMC,kBAEd1D,EAAA5B,EAAAC,cAACsF,EAAA,EAAD,CACE9D,MAAO,CAAE+D,OAAM,KAAOC,YAAO,KAC7BC,KAAI,iCAAmChB,EAAEiB,OAExCjB,EAAErE,UAIP2D,GACApC,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,SAASC,UAAU,kBACjCqB,EAAMhE,QAGXa,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,UAAUC,UAAU,kBAClCqB,EAAM7D,SAETU,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,UAAUC,UAAU,kBAClCqB,EAAMH,SAEThD,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,SAASC,UAAU,kBACjCqB,EAAMF,QAETjD,EAAA5B,EAAAC,cAAA,MAAIwD,eAAa,OAAOC,UAAU,kBAC/BqB,EAAMlB,YAQrBjC,EAAA5B,EAAAC,cAAC2F,EAAe1B,IAKtBJ,EAAa7B,aAAe,CAC1BgC,sBAAuB,IA2BVH","file":"component---src-templates-season-js-1f75362979c1534c7e73.js","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport BaseTemplate from '../components/BaseTemplate';\r\nimport getSeasonName from '../utils/getSeasonName';\r\n\r\nexport default ({ data, ...props }) => {\r\n  const entry = data.dataJson;\r\n  const seasonName = getSeasonName(entry.season);\r\n\r\n  return <BaseTemplate {...props} title={seasonName} series={entry.series} />;\r\n};\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    dataJson(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      season\r\n      series {\r\n        id\r\n        title\r\n        image {\r\n          childImageSharp {\r\n            fixed(width: 96, height: 150) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n          }\r\n        }\r\n        malId\r\n        rating\r\n        average\r\n        highest\r\n        lowest\r\n        mode\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { roundToTwo } from './helpers';\r\n\r\nexport default function averageRatedTotal({ season, series }) {\r\n  const rated = series.filter((x) => x.rating !== 0);\r\n  const ratedCount = rated.length;\r\n  const average = roundToTwo(\r\n    rated.reduce((p, c) => p + c.rating, 0) / ratedCount\r\n  );\r\n\r\n  return {\r\n    season,\r\n    seriesCount: series.length,\r\n    ratedCount,\r\n    average\r\n  };\r\n}\r\n","import './Table.scss';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nfunction Table({ style, headers, children, ...props }) {\r\n  return (\r\n    <table style={{ ...style }} {...props}>\r\n      <thead>\r\n        <tr>\r\n          {headers.map(({ text, ...x }) => (\r\n            <th key={text} {...x} style={{ ...(x.style || {}) }}>\r\n              {text}\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>{children && children()}</tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nTable.defaultProps = { style: {} };\r\nTable.propTypes = {\r\n  style: PropTypes.object,\r\n  headers: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      text: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  children: PropTypes.func\r\n};\r\n\r\nexport default Table;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport getSeasonName from '../utils/getSeasonName';\r\n\r\nfunction Navigation({ next, previous }) {\r\n  return (\r\n    <nav>\r\n      <ul\r\n        style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          justifyContent: 'space-between',\r\n          listStyle: 'none',\r\n          padding: 0\r\n        }}\r\n      >\r\n        <li>\r\n          {previous && (\r\n            <Link\r\n              to={previous.fields.slug}\r\n              rel=\"prev\"\r\n              style={{ marginRight: 20 }}\r\n            >\r\n              ←{' '}\r\n              {previous.isYear\r\n                ? `${previous.year} Overview`\r\n                : getSeasonName(previous.season)}\r\n            </Link>\r\n          )}\r\n        </li>\r\n        <li>\r\n          {next && (\r\n            <Link to={next.fields.slug} rel=\"next\">\r\n              {next.isYear\r\n                ? `${next.year} Overview`\r\n                : getSeasonName(next.season)}{' '}\r\n              →\r\n            </Link>\r\n          )}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nconst navLinkProps = PropTypes.shape({ season: PropTypes.string.isRequired });\r\n\r\nNavigation.propTypes = {\r\n  next: navLinkProps,\r\n  previous: navLinkProps\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport Table from './Table';\r\n\r\nimport getSeasonName from '../utils/getSeasonName';\r\n\r\nconst rhsAlign = { textAlign: 'right' };\r\nconst headers = [\r\n  { text: '' },\r\n  { text: 'Total', style: { ...rhsAlign } },\r\n  { text: 'Rated', style: { ...rhsAlign } },\r\n  { text: 'Average Rating', style: { ...rhsAlign } }\r\n];\r\n\r\nfunction YearOverview({ data }) {\r\n  const sorted = data.sort((a, b) => (a.season > b.season ? 1 : -1));\r\n\r\n  return (\r\n    <div>\r\n      <Table headers={headers}>\r\n        {() =>\r\n          sorted.map((season) => (\r\n            <tr key={season.season}>\r\n              <th>\r\n                <Link to={`/${season.season}`}>\r\n                  {getSeasonName(season.season, false)}\r\n                </Link>\r\n              </th>\r\n              <td column-title=\"Total\" className=\"cell cell--rhs\">\r\n                {season.seriesCount}\r\n              </td>\r\n              <td column-title=\"Rated\" className=\"cell cell--rhs\">\r\n                {season.ratedCount}\r\n              </td>\r\n              <td column-title=\"Average Rating\" className=\"cell cell--rhs\">\r\n                {season.average}\r\n              </td>\r\n            </tr>\r\n          ))\r\n        }\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default YearOverview;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Img from 'gatsby-image';\r\n\r\nimport Layout from './Layout';\r\nimport SEO from './SEO';\r\nimport Table from './Table';\r\nimport NewTabLink from './NewTabLink';\r\nimport Navigation from './Navigation';\r\nimport YearOverview from './YearOverview';\r\n\r\nimport getSeriesStats from '../utils/getSeriesStats';\r\nimport getSeasonName from '../utils/getSeasonName';\r\nimport averageRatedTotal from '../utils/averageRatedTotal';\r\nimport { rhythm } from '../utils/typography';\r\n\r\nconst rhsAlign = { textAlign: 'right' };\r\nconst seasonHeaders = [\r\n  { text: '#', style: { ...rhsAlign } },\r\n  { text: 'Title' },\r\n  { text: 'Rating', style: { ...rhsAlign } },\r\n  { text: 'Average', style: { ...rhsAlign } },\r\n  { text: 'Highest', style: { ...rhsAlign } },\r\n  { text: 'Lowest', style: { ...rhsAlign } },\r\n  { text: 'Mode', style: { ...rhsAlign } }\r\n];\r\n\r\n// order by average desc, rating desc, mode desc, none\r\nconst seriesSorter = (a, b) =>\r\n  b.average - a.average || b.rating - a.rating || b.mode - a.mode || 0;\r\n\r\nfunction BaseTemplate({\r\n  title,\r\n  series,\r\n  overview,\r\n  hideRatingColumn,\r\n  customDescriptiveText,\r\n  pageContext\r\n}) {\r\n  const tableHeaders = hideRatingColumn\r\n    ? seasonHeaders.filter((x) => x.text !== `Rating`)\r\n    : seasonHeaders;\r\n\r\n  const { average, ratedCount } = averageRatedTotal({ series });\r\n  const items = series.sort(seriesSorter);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={title} />\r\n      <div>\r\n        <h2>{title}</h2>\r\n        {!!ratedCount && (\r\n          <p>\r\n            Average: {average} for {ratedCount} rated series\r\n          </p>\r\n        )}\r\n        {overview && <YearOverview data={overview} />}\r\n        <p style={{ whiteSpace: 'pre-line' }}>\r\n          {customDescriptiveText}\r\n          {!hideRatingColumn &&\r\n            `In the event I have yet to rate a series, the rating will appear as a hyphen (-).\r\n            This is usually the case for series that are still airing.`}\r\n          {'\\n\\r'}In the cases where multiple ratings are tied in the mode\r\n          calculation, one will be arbitrarily selected.\r\n        </p>\r\n        <Table headers={tableHeaders}>\r\n          {() =>\r\n            items.map((s, i) => {\r\n              const number = i + 1;\r\n              const stats = getSeriesStats(s);\r\n\r\n              return (\r\n                <tr key={s.id}>\r\n                  <td column-title=\"#\" className=\"cell cell--rhs\">\r\n                    <div\r\n                      style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-between'\r\n                      }}\r\n                    >\r\n                      <div>{number}</div>\r\n                      {s.season && <div>{getSeasonName(s.season, false)}</div>}\r\n                    </div>\r\n                  </td>\r\n                  <td column-title=\"Title\" className=\"cell\">\r\n                    <div style={{ display: 'flex' }}>\r\n                      <Img\r\n                        style={{ flex: `0 0 96px` }}\r\n                        {...s.image.childImageSharp}\r\n                      />\r\n                      <NewTabLink\r\n                        style={{ margin: `0 ${rhythm(1 / 2)}` }}\r\n                        href={`https://myanimelist.net/anime/${s.malId}`}\r\n                      >\r\n                        {s.title}\r\n                      </NewTabLink>\r\n                    </div>\r\n                  </td>\r\n                  {!hideRatingColumn && (\r\n                    <td column-title=\"Rating\" className=\"cell cell--rhs\">\r\n                      {stats.rating}\r\n                    </td>\r\n                  )}\r\n                  <td column-title=\"Average\" className=\"cell cell--rhs\">\r\n                    {stats.average}\r\n                  </td>\r\n                  <td column-title=\"Highest\" className=\"cell cell--rhs\">\r\n                    {stats.highest}\r\n                  </td>\r\n                  <td column-title=\"Lowest\" className=\"cell cell--rhs\">\r\n                    {stats.lowest}\r\n                  </td>\r\n                  <td column-title=\"Mode\" className=\"cell cell--rhs\">\r\n                    {stats.mode}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n        </Table>\r\n      </div>\r\n      <Navigation {...pageContext} />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nBaseTemplate.defaultProps = {\r\n  customDescriptiveText: ''\r\n};\r\n\r\nBaseTemplate.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  series: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      rating: PropTypes.number,\r\n      average: PropTypes.number,\r\n      highest: PropTypes.number,\r\n      lowest: PropTypes.number,\r\n      mode: PropTypes.number\r\n    })\r\n  ).isRequired,\r\n  overview: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      season: PropTypes.string.isRequired,\r\n      seriesCount: PropTypes.number.isRequired,\r\n      ratedCount: PropTypes.number.isRequired,\r\n      average: PropTypes.string.isRequired\r\n    })\r\n  ),\r\n  hideRatingColumn: PropTypes.bool,\r\n  customDescriptiveText: PropTypes.string\r\n};\r\n\r\nexport default BaseTemplate;\r\n","import { roundToTwo } from './helpers';\r\n\r\nexport default function getSeriesStats({\r\n  rating,\r\n  average,\r\n  highest,\r\n  lowest,\r\n  mode,\r\n  episodes\r\n}) {\r\n  return {\r\n    rating: rating || '-',\r\n    average: roundToTwo(average),\r\n    highest,\r\n    lowest,\r\n    mode\r\n  };\r\n}\r\n"],"sourceRoot":""}